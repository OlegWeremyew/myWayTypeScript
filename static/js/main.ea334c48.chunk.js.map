{"version":3,"sources":["components/Footer/Footer.module.css","components/MainWindow/News/News.module.css","components/MainWindow/Music/Music.module.css","components/MainWindow/Friends/Friends.module.css","components/MainWindow/Settings/Settings.module.css","components/MainWindow/Messages/Message/Message.module.css","components/MainWindow/Messages/DialogItem/DialogsItem.module.css","components/Navbar/Navbar.module.css","components/MainWindow/Users/Users.module.css","common/Preloader/Preloader.module.css","components/MainWindow/Profile/Profile.module.css","components/Navbar/Navbar.tsx","components/Footer/Footer.tsx","components/MainWindow/News/News.tsx","components/MainWindow/Music/Music.tsx","components/MainWindow/Friends/Friends.tsx","components/MainWindow/Settings/Settings.tsx","redux/messagesReducer.ts","components/MainWindow/Messages/Message/Message.tsx","components/MainWindow/Messages/DialogItem/DialogsItem.tsx","common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","components/MainWindow/Messages/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect/withAuthRedirect.tsx","components/MainWindow/Messages/MessagesContainer.tsx","components/MainWindow/Messages/Messages.tsx","Api/api.ts","utils/objectsHellper.ts","redux/usersReducer.ts","common/Paginator/Paginator.tsx","assets/images/user.png","components/MainWindow/Users/User.tsx","components/MainWindow/Users/Users.tsx","assets/images/preloader.gif","common/Preloader/Preloader.tsx","redux/usersSelectors.ts","components/MainWindow/Users/UsersContainer.tsx","assets/images/avatar_for_profile.jpg","components/MainWindow/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/MainWindow/Profile/ProfileInfo/ProfileInfo.tsx","redux/profileReducer.ts","components/MainWindow/Profile/MyPosts/Post/Post.tsx","components/MainWindow/Profile/MyPosts/MyPosts.tsx","components/MainWindow/Profile/MyPosts/MyPostsContainer.tsx","components/MainWindow/Profile/Profile.tsx","components/MainWindow/Profile/ProfileContainer.tsx","hoc/withRouter/withRouter.tsx","assets/images/logo.png","components/Header/Header.tsx","redux/authReducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx","redux/AppReducer.ts","redux/sidebarPageReducer.ts","redux/reduxStore.ts","App.tsx","index.tsx","common/FormsControls/FormsControls.module.css","components/MainWindow/Messages/Messages.module.css","common/Paginator/Paginator.module.css","components/MainWindow/Profile/ProfileInfo/ProfileInfo.module.css","App.module.css","components/MainWindow/Profile/MyPosts/MyPosts.module.css","components/MainWindow/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css"],"names":["module","exports","Navbar","className","c","nav","item","navData","isActive","activeLink","to","active","Footer","footer","News","news","Music","music","Friends","friends","Settings","settings","ADD_MESSAGE","initialState","users","name","id","img","messages","message","Message","props","DialogsItem","path","dialog","src","FormControl","meta","touched","error","children","hasError","styleError","styles","formControl","Textarea","input","restProps","child","element","Input","createField","placeholder","validators","component","text","Field","validate","required","value","maxLengthCreator","maxLength","length","ReduxAddMessageForm","reduxForm","form","onSubmit","handleSubmit","mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","MessagesContainer","compose","messagesPage","dispatch","addMessage","newMessageText","type","payload","addMessageCreator","dialogsItem","map","u","m","dialogs","dialogItem","values","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","profileAPI","status","put","authApi","email","password","rememberMe","updateObjectInArray","items","itemId","objPropName","newObjProps","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_IN_PROGRESS","totalUsersCount","isFetching","followingInProgress","followSuccess","userID","unfollowSuccess","setCurrentPage","toggleIsFetching","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","useEffect","cn","paginator","onClick","filter","p","selectedPage","pageNumber","e","User","user","photos","small","userImage","userPhoto","alt","followed","disabled","some","Users","Preloader","preloader","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersAPIComponent","requestUsers","this","React","Component","UsersContainer","page","a","totalCount","count","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","updateUserStatus","onStatusChange","currentTarget","prevProps","prevState","onDoubleClick","onChange","autoFocus","onBlur","ProfileInfo","profile","avatarBlock","avatar","large","avatarDefault","ADD_POST","DELETED_POST","SET_USER_PROFILE","SET_STATUS","posts","likesCount","setStatus","Post","title","itemText","MyPosts","memo","profilePage","myPosts","ReduxAddNewPostForm","onAddPost","AddNewPost","MyPostsContainer","newPostText","addPost","Profile","ProfileAPIContainer","authorizedUserID","history","getUserProfile","getUserStatus","ProfileContainer","resultCode","params","useParams","location","useLocation","Header","header","logo","loginBlock","login","logout","SET_USER_DATA","TOGGLE_IS_AUTH","setAuthUserData","getAuthUserData","HeaderContainer","Login","LoginReduxForm","formData","style","formSummaryError","LoginAPIContainer","LoginContainer","stopSubmit","_error","SET_INITIALIZED","initialized","rootReducer","combineReducers","action","newPost","Date","getTime","f","postId","newMessage","sidebar","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","App","initializeApp","appContent","appContentWindow","AppContainer","promise","Promise","all","MainApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea334c48.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__mhg74\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__37yFc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"music\":\"Music_music__JnEwt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends\":\"Friends_friends__2_1Vc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__Wu77x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1_lWt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__26p68\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1Fdz2\",\"item\":\"Navbar_item__1onIf\",\"activeLink\":\"Navbar_activeLink__f94mN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__33a3z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__3C5_j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3rowZ\",\"ava\":\"Profile_ava__3qkus\"};","import React from 'react';\r\nimport c from \"./Navbar.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return(\r\n        <nav className={c.nav}>\r\n            <div className={c.item}>\r\n                <NavLink className={ (navData) => navData.isActive? c.activeLink: \"\"} to=\"/profile\">Profile</NavLink>\r\n            </div>\r\n            <div className={ `${c.item} ${c.active}` }>\r\n                <NavLink className={ (navData) => navData.isActive? c.activeLink: \"\"} to=\"/messages\">Message</NavLink>\r\n            </div>\r\n            <div className={ `${c.item} ${c.active}` }>\r\n                <NavLink className={ (navData) => navData.isActive? c.activeLink: \"\"} to=\"/users\">Users</NavLink>\r\n            </div>\r\n            <div className={c.item}>\r\n                <NavLink className={ (navData) => navData.isActive? c.activeLink: \"\"} to=\"/news\">News</NavLink>\r\n            </div>\r\n            <div className={c.item}>\r\n                <NavLink className={ (navData) => navData.isActive? c.activeLink: \"\"} to=\"/music\">Music</NavLink>\r\n            </div>\r\n            <div className={c.item}>\r\n                <NavLink className={ (navData) => navData.isActive? c.activeLink: \"\"} to=\"/settings\">Settings</NavLink>\r\n            </div>\r\n            <div className={c.item}>\r\n                <NavLink className={ (navData) => navData.isActive? c.activeLink: \"\"} to=\"/friends\">Friends</NavLink>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport c from \"./Footer.module.css\"\r\n\r\nconst Footer = () => {\r\n    return(\r\n<div className={c.footer}>\r\n    Footer\r\n</div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport c from \"./News.module.css\"\r\n\r\nconst News = () => {\r\n    return(\r\n        <div className={c.news}>\r\n            News\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport c from \"./Music.module.css\"\r\n\r\nconst Music = () => {\r\n    return(\r\n        <div className={c.music}>\r\n            Music\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport c from \"./Friends.module.css\"\r\n\r\nconst Friends = () => {\r\n    return(\r\n        <div className={c.friends}>\r\n            Friends\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Friends;","import React from 'react';\r\nimport c from \"./Settings.module.css\"\r\n\r\nconst Settings = () => {\r\n    return(\r\n        <div className={c.settings}>\r\n            Settings\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Settings;","const ADD_MESSAGE = \"SOCIAL_NETWORK/MESSAGES/ADD_MESSAGE\"\r\n\r\nconst initialState = {\r\n    users: [\r\n        {\r\n            name: \"Oleg\",\r\n            id: 1,\r\n            img: \"https://avatars.mds.yandex.net/get-zen_doc/3986249/pub_607ecd1d13c71c1ca8a34192_607ee065330a4f14d551104b/scale_1200\"\r\n        },\r\n        {\r\n            name: \"Diana\",\r\n            id: 2,\r\n            img: \"https://avatars.mds.yandex.net/i?id=64b380ea3aa0d80cad94cb1a24a3b3f5-4233014-images-thumbs&ref=rim&n=33&w=150&h=150\"\r\n        },\r\n        {name: \"Fat cat\", id: 3, img: \"https://data.whicdn.com/images/310252363/original.jpg\"},\r\n        {\r\n            name: \"Dimka\",\r\n            id: 4,\r\n            img: \"https://i.pinimg.com/originals/b7/44/46/b744464dd3d970ad96745be8de69d755.jpg\"\r\n        },\r\n        {\r\n            name: \"Ella\",\r\n            id: 5,\r\n            img: \"https://st.depositphotos.com/1023162/5099/i/950/depositphotos_50991807-stock-photo-sexy-woman-in-fashion-sunglasses.jpg\"\r\n        },\r\n        {\r\n            name: \"Makar\",\r\n            id: 6,\r\n            img: \"https://avatars.mds.yandex.net/i?id=55d09aa1629f72a149098b2c3127e039-5222024-images-thumbs&ref=rim&n=33&w=150&h=150\"\r\n        },\r\n    ] as Array<UserType>,\r\n    messages: [\r\n        {message: \"Hi\", id: 1},\r\n        {message: \"Ho\", id: 2},\r\n        {message: \"He\", id: 3},\r\n        {message: \"Hu\", id: 4},\r\n        {message: \"Hio\", id: 5},\r\n        {message: \"Hia\", id: 6},\r\n    ] as Array<MessageType>,\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const messagesReducer = (state: initialStateType = initialState, action: ActionMessageTypes): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            let newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: action.payload.newMessageText,\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type addMessageCreatorType = ReturnType<typeof addMessageCreator>\r\nexport const addMessageCreator = (newMessageText: string) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        payload: {\r\n            newMessageText,\r\n        }\r\n    } as const\r\n}\r\n\r\n//Types ======================================\r\n\r\nexport type ActionMessageTypes = addMessageCreatorType\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    img: string\r\n}\r\n\r\nexport type MessageType = {\r\n    message: string\r\n    id: number\r\n}","import React from 'react';\r\nimport c from \"./Message.module.css\"\r\nimport {MessageType} from \"../../../../redux/messagesReducer\";\r\n\r\nconst Message = (props: MessageType) => {\r\n\r\n    return (\r\n        <div className={c.message}>{props.message}</div>\r\n    );\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport c from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../../../redux/messagesReducer\";\r\n\r\nconst DialogsItem = (props: UserType) => {\r\n\r\n    let path = \"/messages/\" + props.id;\r\n\r\n    return (\r\n        <div className={c.dialog}>\r\n            <div>\r\n                <img src={props.img}/>\r\n            </div>\r\n            <div>\r\n                <NavLink to={path}>{props.name}</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogsItem;","import React, {ComponentType} from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\n\r\nconst FormControl = ({meta: {touched, error}, children}: any) => {\r\n\r\n    const hasError = touched && error\r\n    const styleError = hasError ? styles.error : \"\"\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + styleError}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, element, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, element, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: any[], component: componentType, props: { type: string }, text: string) => {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype componentType = \"input\" | \"select\" | \"textarea\" | ComponentType<WrappedFieldProps> | undefined","import React from 'react';\r\n\r\nexport const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {FormMessagesType} from \"../Messages\";\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormMessagesType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"newMessageText\"}\r\n                    placeholder={\"Write your message\"}\r\n                    validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ReduxAddMessageForm = reduxForm<FormMessagesType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(WrappedComponent: React.ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={'/login'}/>\r\n        }\r\n        return <WrappedComponent {...restProps as T} />\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n","import React, {ComponentType} from 'react';\r\nimport {addMessageCreator, initialStateType} from \"../../../redux/messagesReducer\";\r\nimport {Messages} from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect/withAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    messagesPage: initialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType) : MapStateToPropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageText: string) => {\r\n            dispatch(addMessageCreator(newMessageText))\r\n        },\r\n    }\r\n}\r\n\r\nexport let MessagesContainer = compose<ComponentType>(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)(Messages)\r\n","import React, {ChangeEvent} from 'react';\r\nimport c from \"./Messages.module.css\"\r\nimport Message from \"./Message/Message\";\r\nimport DialogsItem from \"./DialogItem/DialogsItem\";\r\nimport {UsersPropsType} from \"./MessagesContainer\";\r\nimport {ReduxAddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nexport type FormMessagesType = {\r\n    newMessageText: string\r\n}\r\n\r\nexport const Messages = (props: UsersPropsType) => {\r\n\r\n    let dialogsItem = props.messagesPage.users\r\n        .map(u => <DialogsItem key={u.id} name={u.name} id={u.id} img={u.img}/>)\r\n    let message = props.messagesPage.messages\r\n        .map(m => <Message key={m.id} message={m.message} id={m.id}/>)\r\n\r\n    const addMessage = (values: FormMessagesType) => {\r\n        props.addMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={c.dialogs}>\r\n            <div className={c.dialogItem}>\r\n                {dialogsItem}\r\n            </div>\r\n            <div className={c.messages}>\r\n                {message}\r\n            </div>\r\n            <ReduxAddMessageForm onSubmit={addMessage}/>\r\n        </div>\r\n    );\r\n}","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"f5a121b3-d5d2-4866-a73a-ab1418f0e4d8\",\r\n    },\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 5) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: string) {\r\n        return instance.post(`follow/${userId}`).then(response => response.data)\r\n    },\r\n    unfollow(userId: string) {\r\n        return instance.delete(`follow/${userId}`).then(response => response.data)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status})\r\n    },\r\n}\r\n\r\nexport const authApi = {\r\n    getAuth() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}\r\n","\r\nexport const updateObjectInArray = (items: any[], itemId: string, objPropName: string, newObjProps: newObjPropsType) => {\r\n    return items\r\n        .map(m => {\r\n            if (m[objPropName] === itemId) {\r\n                return {...m, ...newObjProps}\r\n            }\r\n            return m\r\n        })\r\n}\r\ntype newObjPropsType = {\r\n    followed: boolean\r\n}","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../Api/api\";\r\nimport {ActionAllType} from \"./reduxStore\";\r\nimport {updateObjectInArray} from \"../utils/objectsHellper\";\r\n\r\nconst FOLLOW = \"SOCIAL_NETWORK/USERS/FOLLOW\"\r\nconst UNFOLLOW = \"SOCIAL_NETWORK/USERS/UNFOLLOW\"\r\nconst SET_USERS = \"SOCIAL_NETWORK/USERS/SET_USERS\"\r\nconst SET_CURRENT_PAGE = \"SOCIAL_NETWORK/USERS/SET-CURRENT-PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SOCIAL_NETWORK/USERS/SET-TOTAL-USERS-COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"SOCIAL_NETWORK/USERS/TOGGLE-IS-FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_IN_PROGRESS = \"SOCIAL_NETWORK/USERS/TOGGLE-IS-FOLLOWING-IN-PROGRESS\"\r\n\r\nconst initialState: initialStateType = {\r\n    users: [] as UserType[],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as string[],\r\n}\r\n\r\nexport const usersReducer = (state: initialStateType = initialState, action: ActionUsersTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.payload.userID, \"id\", {followed: true})\r\n            }\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.payload.userID, \"id\", {followed: false})\r\n            }\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state, users: [...action.payload.users]\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state, currentPage: action.payload.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state, totalUsersCount: action.payload.count\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state, isFetching: action.payload.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_IN_PROGRESS: {\r\n            return {\r\n                ...state, followingInProgress: action.payload.followingInProgress\r\n                    ? [...state.followingInProgress, action.payload.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.payload.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type followType = ReturnType<typeof followSuccess>\r\nexport const followSuccess = (userID: string) => {\r\n    return {\r\n        type: FOLLOW,\r\n        payload: {\r\n            userID,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type unFollowType = ReturnType<typeof unfollowSuccess>\r\nexport const unfollowSuccess = (userID: string) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        payload: {\r\n            userID,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setUsersType = ReturnType<typeof setUsers>\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        payload: {\r\n            users,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setCurrentPageType = ReturnType<typeof setCurrentPage>\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        payload: {\r\n            currentPage,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setTotalUsersCountType = ReturnType<typeof setTotalUsersCount>\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        payload: {\r\n            count: totalCount,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setIsFetchingType = ReturnType<typeof toggleIsFetching>\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        payload: {\r\n            isFetching,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type toggleFollowingProgressType = ReturnType<typeof toggleFollowingProgress>\r\nexport const toggleFollowingProgress = (followingInProgress: boolean, userId: string) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_IN_PROGRESS,\r\n        payload: {\r\n            followingInProgress,\r\n            userId,\r\n        }\r\n    } as const\r\n}\r\n\r\n//=======================thunk\r\n\r\nexport const requestUsers = (page: number, pageSize: number) => async (dispatch: Dispatch<ActionAllType>) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n\r\n    const data = await usersAPI.getUsers(page, pageSize)\r\n\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(data.items))\r\n    dispatch(setTotalUsersCount(data.totalCount))\r\n}\r\n\r\nexport const followUnfollowFlow = async (dispatch: any, userId: string, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    const response = await apiMethod(userId)\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: string) => async (dispatch: Dispatch<ActionAllType>) => {\r\n    await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n}\r\n\r\nexport const unFollow = (userId: string) => async (dispatch: Dispatch<ActionAllType>) => {\r\n    await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n}\r\n\r\n\r\n//Types======================================================\r\n\r\nexport type ActionUsersTypes = followType\r\n    | unFollowType\r\n    | setUsersType\r\n    | setCurrentPageType\r\n    | setTotalUsersCountType\r\n    | setIsFetchingType\r\n    | toggleFollowingProgressType\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: string\r\n    uniqueUrlName: string\r\n    photos: { small: string, large: string }\r\n    status: string\r\n    followed: boolean\r\n}\r\n\r\nexport type initialStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: string[]\r\n}\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport styles from \"./Paginator.module.css\"\r\nimport cn from 'classnames'\r\n\r\ntype UsersPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nexport const Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}: UsersPropsType) => {\r\n\r\n    const pagesCount = (Math.ceil(totalItemsCount / pageSize))\r\n    const pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    useEffect(() => {\r\n        setPortionNumber(Math.ceil(currentPage / portionSize))\r\n    }, [currentPage])\r\n\r\n    return (\r\n        <div className={cn(styles.paginator)}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => setPortionNumber(portionNumber - 1)}>\r\n                PREV\r\n            </button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return (\r\n                        <span className={cn({[styles.selectedPage]: currentPage === p}, styles.pageNumber)}\r\n                              key={p}\r\n                              onClick={(e) => onPageChanged(p)}>\r\n                            {p}\r\n                        </span>\r\n                    )\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)\r\n            }>\r\n                NEXT\r\n            </button>}\r\n        </div>\r\n    )\r\n};\r\n","export default __webpack_public_path__ + \"static/media/user.00d92f05.png\";","import React from 'react';\r\nimport c from \"./Users.module.css\";\r\nimport userImage from \"../../../assets/images/user.png\";\r\nimport {UserType} from \"../../../redux/usersReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UsersPropsType = {\r\n    user: UserType\r\n    follow: (userID: string) => void\r\n    unfollow: (userID: string) => void\r\n    followingInProgress: Array<any>\r\n}\r\n\r\nexport const User = ({user,follow,unfollow,followingInProgress} : UsersPropsType) => {\r\n\r\n    return (<div>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={\"/profile/\" + user.id}>\r\n                            <img src={user.photos.small !== null ? user.photos.small : userImage} className={c.userPhoto}\r\n                                 alt=\"photo\"/>\r\n                                </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {\r\n                                user.followed\r\n                                    ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                              onClick={() => {\r\n                                                  unfollow(user.id)\r\n                                              }}>Unfollow</button>\r\n                                    : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                              onClick={() => {\r\n                                                  follow(user.id)\r\n                                              }}>Follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                            <div>{user.name}</div>\r\n                            <div>{user.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"m.location.country\"}</div>\r\n                            <div>{\"m.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {UserType} from \"../../../redux/usersReducer\";\r\nimport {Paginator} from \"../../../common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n\r\n    users: Array<UserType>\r\n    follow: (userID: string) => void\r\n    unfollow: (userID: string) => void\r\n    followingInProgress: Array<any>\r\n}\r\n\r\nexport const Users = ({totalUsersCount, pageSize, currentPage, onPageChanged, ...props}: UsersPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n                onPageChanged={onPageChanged}\r\n            />\r\n            {\r\n                props.users.map(u => <User\r\n                        key={u.id}\r\n                        user={u}\r\n                        follow={props.follow}\r\n                        unfollow={props.unfollow}\r\n                        followingInProgress={props.followingInProgress}\r\n                    />\r\n                )}\r\n        </div>\r\n    );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/preloader.1952935e.gif\";","import React from 'react';\r\nimport preloader from \"../../assets/images/preloader.gif\";\r\nimport c from \"./Preloader.module.css\";\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} className={c.preloader} alt=\"preloader\"/>\r\n        </div>\r\n    );\r\n};\r\n;","import {AppStateType} from \"./reduxStore\";\r\nimport {createSelector} from \"reselect\";\r\nimport {UserType} from \"./usersReducer\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users: UserType[]) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}","import React, {ComponentType} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {\r\n    followSuccess,\r\n    requestUsers,\r\n    setCurrentPage,\r\n    unfollowSuccess,\r\n    UserType\r\n} from \"../../../redux/usersReducer\";\r\nimport {Users} from './Users';\r\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers\r\n} from \"../../../redux/usersSelectors\";\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<any>\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    followSuccess: (userID: string) => void\r\n    unfollowSuccess: (userID: string) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\n\r\nclass UsersAPIComponent extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.requestUsers(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.requestUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    users={this.props.users}\r\n                    follow={this.props.followSuccess}\r\n                    unfollow={this.props.unfollowSuccess}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport let UsersContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        followSuccess,\r\n        unfollowSuccess,\r\n        setCurrentPage,\r\n        requestUsers,\r\n    })\r\n)(UsersAPIComponent)","export default __webpack_public_path__ + \"static/media/avatar_for_profile.e4c1e159.jpg\";","import React, {ChangeEvent} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\ntype stateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state: stateType = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileStatusType, prevState: boolean) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                    status: this.props.status,\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"------\"}</span>\r\n                </div>}\r\n                {this.state.editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={this.onStatusChange}\r\n                        autoFocus\r\n                        value={this.state.status}\r\n                        onBlur={this.deactivateEditMode}\r\n                    />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n","import React from 'react';\r\nimport c from \"./ProfileInfo.module.css\"\r\nimport avatarDefault from '../../../../assets/images/avatar_for_profile.jpg'\r\nimport {ProfileType} from \"../../../../redux/profileReducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateUserStatus}: ProfileInfoPropsType) => {\r\n\r\n    return (\r\n        <div className={c.profile}>\r\n            <div className={c.avatarBlock}>\r\n                <div className={c.avatar}>\r\n                    <img alt='ava'\r\n                         src={profile && profile.photos.large !== null ? profile.photos.large : avatarDefault}/>\r\n                </div>\r\n                <ProfileStatus\r\n                    status={status}\r\n                    updateUserStatus={updateUserStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../Api/api\";\r\nimport {ActionAllType} from \"./reduxStore\";\r\n\r\nconst ADD_POST = \"SOCIAL_NETWORK/PROFILE/ADD_POST\"\r\nconst DELETED_POST = \"SOCIAL_NETWORK/PROFILE/DELETED_POST\"\r\nconst SET_USER_PROFILE = \"SOCIAL_NETWORK/PROFILE/SET-USER-PROFILE\"\r\nconst SET_STATUS = \"SOCIAL_NETWORK/PROFILE/SET-STATUS\"\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {message: \"Hello\", likesCount: 12, id: 1},\r\n        {message: \"Dinosaurs are great\", likesCount: 17, id: 2}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType,\r\n    status: \"\",\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: ActionProfileTypes): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.payload.newPostText,\r\n                likesCount: 12\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        }\r\n        case DELETED_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(f => f.id !== action.payload.postId),\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.payload.profile\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type addPostType = ReturnType<typeof addPost>\r\nexport const addPost = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        payload: {\r\n            newPostText,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type deletePostType = ReturnType<typeof deletePost>\r\nexport const deletePost = (postId: number) => {\r\n    return {\r\n        type: DELETED_POST,\r\n        payload: {\r\n            postId,\r\n        }\r\n    } as const\r\n}\r\n\r\n\r\nexport type setUserProfileType = ReturnType<typeof setUserProfile>\r\nconst setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        payload: {\r\n            profile,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type setProfileStatusType = ReturnType<typeof setStatus>\r\nconst setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        payload: {\r\n            status,\r\n        }\r\n    } as const\r\n}\r\n\r\n\r\n// thunks=========================================================\r\nexport const getUserProfile = (userId: string) => async (dispatch: Dispatch<ActionAllType>) => {\r\n    const response = await profileAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data))\r\n}\r\n\r\nexport const getUserStatus = (userId: string) => async (dispatch: Dispatch<ActionAllType>) => {\r\n    const response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n}\r\n\r\nexport const updateUserStatus = (status: string) => async (dispatch: Dispatch<ActionAllType>) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\n\r\n//Types=========================================================\r\nexport type ActionProfileTypes = addPostType\r\n    | setUserProfileType\r\n    | setProfileStatusType\r\n    | deletePostType\r\n\r\n\r\nexport type PostType = {\r\n    message: string\r\n    likesCount: number\r\n    id: number\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    },\r\n    lookingForAJob: string\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n} | null","import React from 'react';\r\nimport c from \"./Post.module.css\"\r\nimport {PostType} from \"../../../../../redux/profileReducer\";\r\n\r\nconst Post = (props: PostType) => {\r\n\r\n    return (\r\n        <div key={props.id} className={c.item}>\r\n            <img\r\n                src=\"https://slovami.net/wp-content/uploads/thumbs_dir/the-most-beautiful-guys-russia-4-1-nwkkkydf2f1mhw9a4ijzfs2ktasvevyjiyi4xibqis.jpg\"\r\n                alt=\"ava\" title=\"ava\"/>\r\n            <div className={c.itemText}>\r\n                {props.message}\r\n                <div>\r\n                    <span>like: {props.likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport c from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {UsersPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\n\r\ntype AddNewPostFormType = {\r\n    AddNewPost: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nexport const MyPosts = React.memo((props: UsersPropsType) => {\r\n\r\n    let post = props.profilePage.posts.map(p => <Post key={p.id}\r\n                                                      message={p.message}\r\n                                                      likesCount={p.likesCount}\r\n                                                      id={p.id}/>)\r\n\r\n    let addPost = (values: AddNewPostFormType) => {\r\n        props.onAddPost(values.AddNewPost)\r\n    }\r\n\r\n    return (\r\n        <div className={c.myPosts}>\r\n            <h3>My posts</h3>\r\n            <ReduxAddNewPostForm onSubmit={addPost}/>\r\n            <div className={c.posts}>\r\n                {post}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"AddNewPost\"}\r\n                    placeholder={\"Write your message\"}\r\n                    validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxAddNewPostForm = reduxForm<AddNewPostFormType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n","import React from 'react';\r\nimport {addPost, initialStateType} from \"../../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: initialStateType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    onAddPost: (newPostText: string) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        onAddPost: (newPostText: string) => {\r\n            dispatch(addPost(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nexport let MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n","import React from 'react';\r\nimport c from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={c.profile}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserStatus,\r\n    getUserProfile,\r\n    ProfileType,\r\n    updateUserStatus\r\n} from \"../../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {InjectedProps, withRouter2} from \"../../../hoc/withRouter/withRouter\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect/withAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserID: string\r\n}\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToProps & InjectedProps\r\n\r\nclass ProfileAPIContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId: string = this.props.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserID;\r\n            if(!userId){\r\n                //@ts-ignore\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateUserStatus={this.props.updateUserStatus}\r\n\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isAuth: state.auth.isAuth,\r\n        status: state.profilePage.status,\r\n        authorizedUserID: state.auth.data.userId,\r\n    }\r\n}\r\n\r\nexport const ProfileContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n    }),\r\n    withRouter2,\r\n    withAuthRedirect\r\n)(ProfileAPIContainer);\r\n","import React from \"react\";\r\nimport {useLocation, useParams} from \"react-router-dom\";\r\n\r\nexport type locationType = {\r\n    hash: string\r\n    key: string\r\n    pathname: string\r\n    search: string\r\n    state: object | null\r\n}\r\n\r\nexport type WrappedComponentWithRouterPropsType = {\r\n    userId: string\r\n    location: locationType\r\n}\r\n\r\nexport const withRouter = (WrappedComponent: typeof React.Component) => (props: object) => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const location = useLocation()\r\n\r\n    return (\r\n\r\n        <WrappedComponent\r\n            {...props}\r\n            userId={params.userId}\r\n            location={location}\r\n        />\r\n    );\r\n}\r\n\r\nexport type InjectedProps = {\r\n    userId : string\r\n}\r\n\r\n\r\nexport const withRouter2 = <T  extends object> (WrappedComponent: React.ComponentType<T>) => (props: T) => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const location = useLocation()\r\n    return (\r\n\r\n        <WrappedComponent\r\n            {...props as T}\r\n            userId={params.userId}\r\n            location={location}\r\n\r\n        />\r\n    );\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/logo.cbfad428.png\";","import React from 'react';\r\nimport c from \"./Header.module.css\"\r\nimport logo from \"../../assets/images/logo.png\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n\r\n    return (\r\n        <header className={c.header}>\r\n            <img src={logo} alt='logo' title=\"image logo\"/>\r\n            <div className={c.loginBlock}>\r\n                {\r\n                    props.isAuth\r\n                        ? <div>{props.login} - <button onClick={props.logout}>Logout</button></div>\r\n                        : <NavLink to={'/login'}>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import {authApi} from \"../Api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ActionAllType, AppThunkType} from \"./reduxStore\";\r\n\r\nconst SET_USER_DATA = \"SOCIAL_NETWORK/AUTH/SET-USER-DATA\"\r\nconst TOGGLE_IS_FETCHING = 'SOCIAL_NETWORK/AUTH/TOGGLE-IS-FETCHING'\r\nconst TOGGLE_IS_AUTH = 'SOCIAL_NETWORK/AUTH/TOGGLE-IS-AUTH'\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: ActionAuthReducerType): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA : {\r\n            return {\r\n                ...state,\r\n                data: {\r\n                    ...state.data,\r\n                    email: action.payload.email,\r\n                    login: action.payload.login,\r\n                    userId: action.payload.userId,\r\n                },\r\n                isAuth: action.payload.isAuth\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.payload.isFetching,\r\n            }\r\n        case TOGGLE_IS_AUTH:\r\n            return {\r\n                ...state,\r\n                isAuth: action.payload.isAuth,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype setUserDataType = ReturnType<typeof setAuthUserData>\r\nexport const setAuthUserData = (userId: string, email: string, login: string, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {\r\n            userId,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    } as const\r\n}\r\n\r\ntype setToggleIsFetchingType = ReturnType<typeof setToggleIsFetching>\r\nexport const setToggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        payload: {\r\n            isFetching,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype setToggleIsAuthType = ReturnType<typeof setToggleIsAuth>\r\nexport const setToggleIsAuth = (isAuth: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_AUTH,\r\n        payload: {\r\n            isAuth,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const getAuthUserData = (): AppThunkType => async (dispatch: Dispatch<ActionAllType>) => {\r\n    const response = await authApi.getAuth()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunkType => async (dispatch: any) => {\r\n    const response = await authApi.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        let message = response.data.messages.length > 0\r\n            ? response.data.messages[0]\r\n            : \"Some error\"\r\n        dispatch(stopSubmit(\"Login\", {_error: message}))\r\n    }\r\n}\r\n\r\nexport const logout = () => async (dispatch: Dispatch<ActionAllType>) => {\r\n    const response = await authApi.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(\"\", \"\", \"\", false))\r\n    }\r\n}\r\n\r\n\r\n//Types========================================\r\n\r\nexport type initialStateType = {\r\n    data: dataType\r\n    isFetching: boolean\r\n    isAuth: boolean\r\n}\r\n\r\ntype dataType = {\r\n    userId: string\r\n    email: string\r\n    login: string\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState = {\r\n    data: {} as dataType,\r\n    isFetching: true,\r\n    isAuth: false,\r\n}\r\n\r\nexport type ActionAuthReducerType = setUserDataType\r\n    | setToggleIsFetchingType\r\n    | setToggleIsAuthType","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype HeaderContainerType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype mapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType, HeaderContainerType> {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Header\r\n                isAuth={this.props.isAuth}\r\n                login={this.props.login}\r\n                logout={this.props.logout}\r\n            />\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.data.login,\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\"\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Login = ({isAuth, login, ...restProps}: LoginPropsType) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit,error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                {createField(\"Email\", \"email\", [required], Input, {type: \"text\"}, \"\")}\r\n                {createField(\"Password\", \"password\", [required], Input, {type: \"password\"}, \"\")}\r\n                {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"Remember me\")}\r\n            {\r\n                error &&\r\n                <div className={style.formSummaryError}>{error}</div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: \"Login\"})(LoginForm)\r\n\r\n\r\n//Types==============================================\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype LoginPropsType = {\r\n    isAuth?: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {Login} from \"./Login\";\r\n\r\nclass LoginAPIContainer extends React.Component<LoginContainerType, LoginContainerType> {\r\n\r\n    render() {\r\n        return (\r\n            <Login\r\n            isAuth={this.props.isAuth}\r\n            login={this.props.login}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const LoginContainer = connect(mapStateToProps, {\r\n    login\r\n})(LoginAPIContainer)\r\n\r\n\r\n//Types================================================================\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype LoginContainerType = mapStateToPropsType & mapDispatchToPropsType","import {getAuthUserData} from \"./authReducer\";\r\nimport {AppThunkType} from \"./reduxStore\";\r\n\r\nconst SET_INITIALIZED = \"SOCIAL_NETWORK/APP/SET-INITIALIZED\"\r\n\r\nexport const appReducer = (state: initialStateType = initialState, action: ActionAppReducerType): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED : {\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype initializedSuccessType = ReturnType<typeof initializedSuccess>\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: SET_INITIALIZED,\r\n    } as const\r\n}\r\n\r\nexport const initializeApp = (): AppThunkType => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\n\r\n//Types======================================\r\n\r\n\r\nexport type ActionAppReducerType = initializedSuccessType\r\n\r\n\r\nexport type initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}","import {sidebarType} from \"./store\";\r\n\r\nconst initialState = {}\r\n\r\nexport const sidebarReducer = (state: sidebarType  = initialState, action: any) => {\r\n    return state\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ActionProfileTypes, profileReducer} from \"./profileReducer\";\r\nimport {ActionMessageTypes, messagesReducer} from \"./messagesReducer\";\r\nimport {sidebarReducer} from \"./sidebarPageReducer\";\r\nimport {ActionUsersTypes, usersReducer} from \"./usersReducer\";\r\nimport {ActionAuthReducerType, authReducer} from \"./authReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport {ActionAppReducerType, appReducer} from \"./AppReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: messagesReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type ActionAllType = ActionProfileTypes\r\n    | ActionMessageTypes\r\n    | ActionUsersTypes\r\n    | ActionAuthReducerType\r\n    | ActionAppReducerType\r\n\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, ActionAllType>","import React from 'react';\r\nimport c from './App.module.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Footer from \"./components/Footer/Footer\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport News from \"./components/MainWindow/News/News\";\r\nimport Music from \"./components/MainWindow/Music/Music\";\r\nimport Friends from \"./components/MainWindow/Friends/Friends\";\r\nimport Settings from \"./components/MainWindow/Settings/Settings\";\r\nimport {MessagesContainer} from \"./components/MainWindow/Messages/MessagesContainer\";\r\nimport {UsersContainer} from \"./components/MainWindow/Users/UsersContainer\";\r\nimport {ProfileContainer} from \"./components/MainWindow/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport {LoginContainer} from \"./components/Login/LoginContainer\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/AppReducer\";\r\nimport {AppStateType, store} from \"./redux/reduxStore\";\r\nimport {Preloader} from \"./common/Preloader/Preloader\";\r\n\r\n//const MessagesContainer = React.lazy(() => import('./components/MainWindow/Messages/MessagesContainer'));\r\n//const ProfileContainer = React.lazy(() => import('./components/MainWindow/Profile/ProfileContainer'));\r\n\r\nclass App extends React.Component<AppContainerType, AppContainerType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <main className={c.appContent}>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className={c.appContentWindow}>\r\n                    <Routes>\r\n                        <Route path=\"/profile/\" element={<ProfileContainer/>}>\r\n                            <Route path=\":userId\" element={<ProfileContainer/>}/>\r\n                        </Route>\r\n\r\n                        <Route path=\"/profile/\" element={<ProfileContainer/>}>\r\n                            <Route path=\":userId\" element={<ProfileContainer/>}/>\r\n                        </Route>\r\n\r\n                        <Route path=\"/messages/\" element={<MessagesContainer/>}>\r\n                            <Route path=\":userId\" element={<MessagesContainer/>}/>\r\n                        </Route>\r\n\r\n                        <Route path=\"/users/*\" element={<UsersContainer/>}/>\r\n                        <Route path=\"/news/*\" element={<News/>}/>\r\n                        <Route path=\"/music/*\" element={<Music/>}/>\r\n                        <Route path=\"/settings/*\" element={<Settings/>}/>\r\n                        <Route path=\"/friends/*\" element={<Friends/>}/>\r\n\r\n                        <Route path=\"/login\" element={<LoginContainer/>}/>\r\n\r\n                    </Routes>\r\n                </div>\r\n                <Footer/>\r\n            </main>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nconst AppContainer = connect(mapStateToProps, {\r\n    initializeApp,\r\n})(App);\r\n\r\nexport const MainApp = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\n\r\n//Types=====================================================================\r\n\r\ntype mapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\ntype AppContainerType = mapStateToPropsType & mapDispatchToPropsType\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {MainApp} from './App';\r\n\r\n    ReactDOM.render(\r\n                <MainApp/>,\r\n        document.getElementById('root')\r\n    );\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3bb8c\",\"error\":\"FormsControls_error__17NH9\",\"formSummaryError\":\"FormsControls_formSummaryError__1kRrY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Messages_dialogs__2a5ir\",\"dialogItem\":\"Messages_dialogItem__1fljT\",\"dialog\":\"Messages_dialog__amYKR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__3HTlb\",\"pageNumber\":\"Paginator_pageNumber__3FL8_\",\"selectedPage\":\"Paginator_selectedPage__3C147\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ground\":\"ProfileInfo_ground__tDaWn\",\"ava\":\"ProfileInfo_ava__9e5p9\",\"avatar\":\"ProfileInfo_avatar__WJ8zq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContent\":\"App_appContent__4mg9X\",\"appContentWindow\":\"App_appContentWindow__dnoS0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1Dxws\",\"posts\":\"MyPosts_posts__1WTYZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3IYxb\",\"itemText\":\"Post_itemText__rOuHO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3WLj3\",\"loginBlock\":\"Header_loginBlock__3D_es\"};"],"sourceRoot":""}