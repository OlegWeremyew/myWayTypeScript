{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["FormControl","meta","touched","error","children","hasError","styleError","styles","className","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","Login","isAuth","login","captchaUrl","to","LoginReduxForm","onSubmit","formData","email","password","rememberMe","captcha","reduxForm","form","handleSubmit","type","src","alt","style","formSummaryError","LoginAPIContainer","this","React","Component","LoginContainer","connect","state","auth"],"mappings":"qRAKMA,EAAoD,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAE1EC,EAAWH,GAAWC,EACtBG,EAAaD,EAAWE,IAAOJ,MAAQ,GAE7C,OACI,sBAAKK,UAAWD,IAAOE,YAAc,IAAMH,EAA3C,UACI,8BACKF,IAEL,8BACKC,GAAY,+BAAOF,UAMvBO,EAAwC,SAACC,GAAW,IACtDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD8C,YACxBU,EADwB,mBAE5D,OACI,cAACX,EAAD,2BAAiBW,GAAjB,aACI,oDAAcC,GAAWC,QAKxBC,EAAqC,SAACH,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD2C,YACrBU,EADqB,mBAEzD,OACI,cAACX,EAAD,2BAAiBW,GAAjB,aACI,iDAAWC,GAAWC,QAK3B,SAASE,EAA8BC,EAA4BC,EAASC,EAAqCC,EAA0BR,EAAyBS,GACvK,OACI,gCACI,cAAC,IAAD,aACIJ,YAAaA,EACbC,KAAMA,EACNE,UAAWA,EACXE,SAAUH,GACNP,IANZ,IAOQS,O,oBChDhBE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCC3H,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,uKCDrBE,EAAQ,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,OAAQC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,WAMlC,OAAIF,EACO,cAAC,IAAD,CAAUG,GAAI,aAIrB,gCACI,uCACA,cAACC,EAAD,CACIC,SAZK,SAACC,GACdL,EAAMK,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAY/DR,WAAYA,QA6BtBE,EAAiBO,YAA2C,CAACC,KAAM,SAAlDD,EAvB6E,SAAC,GAIO,IAHHE,EAGE,EAHFA,aACAxC,EAEE,EAFFA,MACA6B,EACE,EADFA,WAErG,OACI,uBAAMG,SAAUQ,EAAhB,UACK5B,YAAqC,QAAS,QAAS,CAACS,KAAWV,IAAO,CAAC8B,KAAM,SACjF7B,YAAqC,WAAY,WAAY,CAACS,KAAWV,IAAO,CAAC8B,KAAM,aACvF7B,YAAqC,KAAM,aAAc,GAAID,IAAO,CAAC8B,KAAM,YAAa,eAExFZ,GAAc,qBAAKa,IAAKb,EAAYc,IAAI,eACxC3C,GAAS,qBAAKK,UAAWuC,IAAMC,iBAAtB,SAAyC7C,IAElD6B,GAAcjB,YAAqC,qBAAsB,UAAW,CAACS,KAAWV,IAAO,CAAC8B,KAAM,SAC9GZ,GAAc,wBAAQY,KAAM,SAAd,yBACf,8BACI,mDCvCVK,E,4JAEF,WAEI,OACI,cAAC,EAAD,CACInB,OAAQoB,KAAKvC,MAAMmB,OACnBC,MAAOmB,KAAKvC,MAAMoB,MAClBC,WAAYkB,KAAKvC,MAAMqB,iB,GARPmB,IAAMC,WAmBhCC,EAAiBC,aALC,SAACC,GAAD,MAA+C,CACnEzB,OAAQyB,EAAMC,KAAK1B,OACnBE,WAAYuB,EAAMC,KAAKxB,cAGoF,CAC3GD,WADmBuB,CAEpBL,GAEYI","file":"static/js/7.00cfbf5c.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {Validator} from \"redux-form/lib/Field\";\r\n\r\nconst FormControl: React.FC<FormControlPropsParamsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error\r\n    const styleError = hasError ? styles.error : \"\"\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + styleError}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<T extends string>(placeholder: string | null, name: T, validators: Validator | Validator[], component: componentType, props: { type: string }, text?: string) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n//types====\r\n\r\ntype FormControlPropsParamsType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport type  LoginFormValuesKeysType = Extract<keyof LoginFormValuesType, string>\r\n\r\ntype componentType = \"input\" | \"select\" | \"textarea\" | ComponentType<WrappedFieldProps> | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3bb8c\",\"error\":\"FormsControls_error__17NH9\",\"formSummaryError\":\"FormsControls_formSummaryError__1kRrY\"};","import React from 'react';\r\n\r\nexport const required = (value: string): ReturnValidatorType => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string): ReturnValidatorType => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n//types\r\nexport type ReturnValidatorType = string | undefined","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input, LoginFormValuesKeysType} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\"\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Login = ({isAuth, login, captchaUrl}: LoginPropsType) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm\r\n                onSubmit={onSubmit}\r\n                captchaUrl={captchaUrl}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnProps> & LoginFormOwnProps> = ({\r\n                                                                                                         handleSubmit,\r\n                                                                                                         error,\r\n                                                                                                         captchaUrl\r\n                                                                                                     }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesKeysType>(\"Email\", \"email\", [required], Input, {type: \"text\"})}\r\n            {createField<LoginFormValuesKeysType>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField<LoginFormValuesKeysType>(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"Remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt='captchaUrl'/>}\r\n            {error && <div className={style.formSummaryError}>{error}</div>}\r\n\r\n            {captchaUrl && createField<LoginFormValuesKeysType>('Symbols from image', 'captcha', [required], Input, {type: \"text\"})}\r\n            {captchaUrl && <button type={'submit'}>Get Started</button>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormOwnProps>({form: \"Login\"})(LoginForm)\r\n\r\n\r\n//Types==============================================\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n    checkbox: boolean\r\n}\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype LoginPropsType = {\r\n    isAuth?: boolean\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    captchaUrl: string | null\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {Login} from \"./Login\";\r\n\r\nclass LoginAPIContainer extends React.Component<LoginContainerType, LoginContainerType> {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Login\r\n                isAuth={this.props.isAuth}\r\n                login={this.props.login}\r\n                captchaUrl={this.props.captchaUrl}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n})\r\n\r\nconst LoginContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n    login\r\n})(LoginAPIContainer)\r\n\r\nexport default LoginContainer\r\n\r\n//Types================================================================\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\ntype LoginContainerType = mapStateToPropsType & mapDispatchToPropsType"],"sourceRoot":""}