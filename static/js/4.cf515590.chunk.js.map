{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.scss","components/Login/Login.module.scss","hoc/withAuthRedirect/withAuthRedirect.tsx","components/MainWindow/Profile/ProfileInfo/ProfileInfo.module.scss","components/MainWindow/Profile/Profile.module.scss","components/MainWindow/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.scss","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileDataForm/ProfileDataForm.module.scss","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileData/ProfileData.module.scss","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileData/Contact/Contact.module.scss","components/MainWindow/Profile/MyPosts/MyPosts.module.css","components/MainWindow/Profile/MyPosts/Post/Post.module.css","assets/images/avatar_for_profile.jpg","components/MainWindow/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileDataForm/ProfileDataForm.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileData/Contact/Contact.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileData/ProfileData.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileEdit.tsx","components/MainWindow/Profile/ProfileInfo/ProfileInfo.tsx","components/MainWindow/Profile/MyPosts/Post/Post.tsx","components/MainWindow/Profile/MyPosts/MyPosts.tsx","components/MainWindow/Profile/MyPosts/MyPostsContainer.tsx","components/MainWindow/Profile/Profile.tsx","components/MainWindow/Profile/ProfileContainer.tsx","hoc/withRouter/withRouter.tsx"],"names":["FormControl","meta","touched","error","children","hasError","styleError","styles","EMPTY_STRING","className","Textarea","props","input","restProps","textarea","Input","createField","placeholder","name","validators","component","text","validate","module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","PATH","LOGIN","ProfileStatus","editMode","status","isOwner","activateEditMode","setState","deactivateEditMode","updateUserStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","this","style","main","statusText","status__text","onDoubleClick","status__pencil","activeInput","onChange","autoFocus","onBlur","React","Component","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","formContainer","onSubmit","contacts__Title","form_edit","formBlock","type","formBlock__check","contactsBlock","Object","keys","contacts","map","key","contact__item","saveEdit__btn","Preloader","Contact","contactTitle","contactValue","href","ProfileData","goToEditMode","formBlock__title","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts__container","contacts__text","contactsBlock__item","icon","activateEdit__btn","onClick","ProfileEdit","setEditModeHandler","disableViewMode","view__btn","initialValues","ProfileInfo","savePhoto","saveProfile","useState","setEditMode","viewMode","setViewMode","formData","a","avatarBlock","avatar","mainPhoto","alt","src","photos","large","avatarDefault","profile__inner","addedPhoto__btn","avatarEdit","target","files","length","FIRST_ELEMENT_IN_ARRAY","onMainPhotoSelected","id","accept","htmlFor","Post","dispatch","useDispatch","fingerUp","setFingerUp","userAvatar","useSelector","getProfilePageProfilePhotosLargeSelector","heart","active","notActive","item","postAvatar","title","itemText","message","activeBlock","likeCounter","likesCount","reaction","ProfileActions","deletePost","delete__btn","maxLength","maxLengthCreator","MyPosts","memo","profilePage","onAddPost","post","posts","myPosts","post__title","ReduxAddNewPostForm","values","AddNewPost","reset","Field","required","s","form__btn","MyPostsContainer","getProfilePageSelector","addPost","Profile","ProfileAPIContainer","userId","authorizedUserID","history","push","Error","getUserProfile","getUserStatus","refreshProfile","snapshot","ProfileContainer","compose","getProfilePageProfileSelector","getAuthIsAuthSelector","getProfilePageStatusSelector","getAuthAuthorizedUserIDSelector","params","useParams","location","useLocation"],"mappings":"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","file":"static/js/4.cf515590.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport styles from './FormsControls.module.scss'\r\n\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {Validator} from \"redux-form/lib/Field\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {EMPTY_STRING} from \"../../constants\";\r\nimport {ReturnComponentType} from \"../../types/ReturnComponentType\";\r\n\r\nconst FormControl: React.FC<FormControlPropsParamsType> = ({meta: {touched, error}, children}): ReturnComponentType => {\r\n\r\n    const hasError = touched && error\r\n    const styleError = hasError ? styles.error : EMPTY_STRING\r\n\r\n    return (\r\n        <div className={styles.FormControl + \" \" + styleError}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {\r\n                    hasError\r\n                    && <span>{error}</span>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea className={styles.textarea} {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input  className={styles.input} {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<T extends string>(placeholder: Nullable<string>, name: T, validators: Validator | Validator[], component: componentType, props: { type: string }, text?: string) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n//types====\r\n\r\ntype FormControlPropsParamsType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport type  LoginFormValuesKeysType = Extract<keyof LoginFormValuesType, string>\r\n\r\ntype componentType = \"input\" | \"select\" | \"textarea\" | ComponentType<WrappedFieldProps> | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__16I1n\",\"error\":\"FormsControls_error__dMqpf\",\"formSummaryError\":\"FormsControls_formSummaryError__2k5qi\",\"textarea\":\"FormsControls_textarea__3h9ML\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__block\":\"Login_login__block__2h76V\",\"login__title\":\"Login_login__title__3yyRU\",\"input__form\":\"Login_input__form__dPp6f\",\"checkbox__form\":\"Login_checkbox__form__3rk2n\",\"form__btn\":\"Login_form__btn__cQeTw\"};","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {PATH} from \"../../enums\";\r\nimport {mapStateToPropsType} from \"./types\";\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(WrappedComponent: React.ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={PATH.LOGIN}/>\r\n        }\r\n        return <WrappedComponent {...restProps as T} />\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__1E2Wo\",\"avatarBlock\":\"ProfileInfo_avatarBlock__3KWpZ\",\"avatar\":\"ProfileInfo_avatar__wS-3w\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2jaUi\",\"profile__inner\":\"ProfileInfo_profile__inner__2ePf7\",\"addedPhoto__btn\":\"ProfileInfo_addedPhoto__btn__7U_zc\",\"avatarEdit\":\"ProfileInfo_avatarEdit__2tb83\",\"view__btn\":\"ProfileInfo_view__btn__2WN46\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__Q5MtS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"ProfileStatus_main__l_0PC\",\"statusText\":\"ProfileStatus_statusText__2mACM\",\"status__text\":\"ProfileStatus_status__text__PAAbK\",\"status__pencil\":\"ProfileStatus_status__pencil__2u-qW\",\"activeInput\":\"ProfileStatus_activeInput__iyvOh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"saveEdit__btn\":\"ProfileDataForm_saveEdit__btn__2WsjO\",\"formContainer\":\"ProfileDataForm_formContainer__LljG_\",\"form_edit\":\"ProfileDataForm_form_edit__3uCwa\",\"formBlock\":\"ProfileDataForm_formBlock__2tDM3\",\"formBlock__check\":\"ProfileDataForm_formBlock__check__3NICF\",\"contacts__Title\":\"ProfileDataForm_contacts__Title__1zjbV\",\"contactsBlock\":\"ProfileDataForm_contactsBlock__3oU5v\",\"contact__item\":\"ProfileDataForm_contact__item__2wrSC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activateEdit__btn\":\"ProfileData_activateEdit__btn__iC6UV\",\"formBlock\":\"ProfileData_formBlock__3foQI\",\"formBlock__title\":\"ProfileData_formBlock__title__36jJX\",\"contacts__Title\":\"ProfileData_contacts__Title__3QFQY\",\"contacts__container\":\"ProfileData_contacts__container__2CIuv\",\"contacts__text\":\"ProfileData_contacts__text__1P9LS\",\"contactsBlock\":\"ProfileData_contactsBlock__1W9WY\",\"contactsBlock__item\":\"ProfileData_contactsBlock__item__1kCdy\",\"icon\":\"ProfileData_icon__msuWl\",\"contact__item\":\"ProfileData_contact__item__1NSSp\",\"contactsRow\":\"ProfileData_contactsRow__2auxE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formBlock\":\"Contact_formBlock__2IEAZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1rwov\",\"post__title\":\"MyPosts_post__title__1TX5C\",\"form__btn\":\"MyPosts_form__btn__1gEVb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1IXMP\",\"itemText\":\"Post_itemText__SWuJm\",\"postAvatar\":\"Post_postAvatar__1ZQwr\",\"likeCounter\":\"Post_likeCounter__1pOG2\",\"notActive\":\"Post_notActive__33AF-\",\"active\":\"Post_active__39ydp\",\"activeBlock\":\"Post_activeBlock__2WzRg\",\"fingerUp\":\"Post_fingerUp__exwo2\",\"reaction\":\"Post_reaction__1kzv4\",\"form__btn\":\"Post_form__btn__S9M8w\",\"delete__btn\":\"Post_delete__btn__pVhkS\"};","export default __webpack_public_path__ + \"static/media/avatar_for_profile.e4c1e159.jpg\";","import React, {ChangeEvent} from 'react';\r\nimport style from './ProfileStatus.module.scss'\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state: stateType = {\r\n        editMode: false,\r\n        status: this.props.status,\r\n        isOwner: this.props.isOwner,\r\n    }\r\n\r\n    activateEditMode = (): void => {\r\n        this.props.isOwner\r\n        && this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = (): void => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileStatusType, prevState: boolean) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={style.main}>\r\n                {\r\n                    !this.state.editMode\r\n                    && <div className={style.statusText}>\r\n                        <h3>Status: </h3>\r\n                        <span\r\n                            className={style.status__text}\r\n                            onDoubleClick={this.activateEditMode}\r\n                        >\r\n                            {this.props.status || \"------\"}\r\n                            <span className={style.status__pencil}>\r\n                                &nbsp;✎\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.editMode\r\n                    && <div className={style.activeInput}>\r\n                        <h3>Status:</h3>\r\n                        <input\r\n                            onChange={this.onStatusChange}\r\n                            autoFocus\r\n                            value={this.state.status}\r\n                            onBlur={this.deactivateEditMode}\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//types====\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\ntype stateType = {\r\n    editMode: boolean\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n","import React, {FC} from \"react\";\r\nimport style from './ProfileDataForm.module.scss'\r\n\r\nimport {ProfileType} from \"../../../../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../../../../../common/Preloader/Preloader\";\r\nimport {createField, Input} from \"../../../../../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ReturnComponentType} from \"../../../../../../types/ReturnComponentType\";\r\nimport {EMPTY_STRING} from \"../../../../../../constants\";\r\n\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({\r\n                                                                                                                      profile,\r\n                                                                                                                      handleSubmit,\r\n                                                                                                                      error,\r\n\r\n                                                                                                                  }): ReturnComponentType => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <form className={style.formContainer} onSubmit={handleSubmit}>\r\n            <span className={style.contacts__Title}>Little about me:</span>\r\n\r\n            <div className={style.form_edit}>\r\n                <div className={style.formBlock}>\r\n                    <span>Full name:</span>\r\n                    {createField(\"Full name\", \"fullname\", [], Input, {type: \"text\"}, EMPTY_STRING)}\r\n                </div>\r\n                <div className={style.formBlock__check}>\r\n                    <span>Looking for a job:</span>\r\n                    {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"}, EMPTY_STRING)}\r\n                </div>\r\n                <div className={style.formBlock}>\r\n                    <span>My professional skills:</span>\r\n                    {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Input, {type: \"textarea\"}, EMPTY_STRING)}\r\n                </div>\r\n                <div className={style.formBlock}>\r\n                    <span>About me:</span>\r\n                    {createField(\"About me\", \"aboutMe\", [], Input, {type: \"textarea\"}, EMPTY_STRING)}\r\n                </div>\r\n\r\n                <span className={style.contacts__Title}>My contacts:</span>\r\n                <div className={style.contactsBlock}>\r\n                    {\r\n                        Object\r\n                            .keys(profile.contacts)\r\n                            .map(key => {\r\n                                return (\r\n                                    <div className={style.contact__item} key={key}>\r\n                                        <span>{key}:{createField(key, `contacts.${key}`, [], Input, {type: \"text\"}, EMPTY_STRING)}</span>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={style.saveEdit__btn}>\r\n                <button>Save</button>\r\n                {\r\n                    error\r\n                    && <div>{error}</div>\r\n                }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n\r\n//types======\r\nexport type ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    goToEditMode?: () => void\r\n}","import React, {FC} from \"react\";\r\nimport style from \"./Contact.module.scss\";\r\nimport {ReturnComponentType} from \"../../../../../../../types/ReturnComponentType\";\r\nimport {EMPTY_STRING} from \"../../../../../../../constants\";\r\n\r\nconst Contact: FC<ContactsPropsType> = ({contactTitle, contactValue}): ReturnComponentType => {\r\n    return (\r\n        <div className={style.formBlock}>\r\n            <b>\r\n                <a href={contactValue ? contactValue : EMPTY_STRING}> {contactTitle}</a>:\r\n            </b>\r\n            {\r\n                contactValue ?\r\n                    <span>{contactValue}</span>\r\n                    : <span>\"Information is not provided\"</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n\r\n//types\r\nexport type ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}","import {Preloader} from \"../../../../../../common/Preloader/Preloader\";\r\nimport style from \"./ProfileData.module.scss\";\r\n\r\nimport {ContactsType, ProfileType} from \"../../../../../../redux/profileReducer\";\r\nimport React from \"react\";\r\nimport Contact from \"./Contact/Contact\";\r\nimport {ReturnComponentType} from \"../../../../../../types/ReturnComponentType\";\r\n\r\nconst ProfileData:React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}): ReturnComponentType => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <span className={style.contacts__Title}>Little about me:</span>\r\n                <div className={style.formBlock}>\r\n                    <div className={style.formBlock__title}>\r\n                        Full name:\r\n                    </div>\r\n                    <div>\r\n                        {profile.fullName}\r\n                    </div>\r\n                </div>\r\n                <div className={style.formBlock}>\r\n                    <div className={style.formBlock__title}>\r\n                        Looking for a job:\r\n                    </div>\r\n                    <div>\r\n                        {\r\n                            profile.lookingForAJob\r\n                                ? \"I'm looking for a job\"\r\n                                : 'no, I\\'m not looking for a job at the moment'\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className={style.formBlock}>\r\n                    <div className={style.formBlock__title}>\r\n                        My professional skills:\r\n                    </div>\r\n                    <div>\r\n                        {profile.lookingForAJobDescription}\r\n                    </div>\r\n                </div>\r\n                <div className={style.formBlock}>\r\n                    <div className={style.formBlock__title}>\r\n                        About me:\r\n                    </div>\r\n                    <div>\r\n                        {profile.aboutMe}\r\n                    </div>\r\n                </div>\r\n                <div className={style.contacts__container}>\r\n                    <span className={style.contacts__Title}>My contacts:</span>\r\n                    <div className={style.contacts__text}>If you want to go to my web pages - click on the title below\r\n                        <span> &#9759;</span>\r\n                    </div>\r\n                    <div className={style.contactsBlock}>\r\n                        {\r\n                            Object\r\n                                .keys(profile.contacts)\r\n                                .map(key => {\r\n                                        return (\r\n                                            <div className={style.contactsBlock__item} key={key}>\r\n                                                <span className={style.icon}>&#10003; </span>\r\n                                                <Contact\r\n                                                    contactTitle={key}\r\n                                                    contactValue={profile.contacts[key as keyof ContactsType]}\r\n                                                />\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                )\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isOwner &&\r\n                    <div className={style.activateEdit__btn} onClick={goToEditMode}>\r\n                        <button type=\"button\">Edit contacts</button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileData\r\n\r\n//types====\r\nexport type ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode?: () => void\r\n}","import React from 'react';\r\nimport style from \"../ProfileInfo.module.scss\";\r\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\nimport {ProfileType} from \"../../../../../redux/profileReducer\";\r\nimport {ReturnComponentType} from \"../../../../../types/ReturnComponentType\";\r\n\r\nconst ProfileEdit: React.FC<ProfileEditPropsType> = ({\r\n                                                         editMode,\r\n                                                         profile,\r\n                                                         onSubmit,\r\n                                                         isOwner,\r\n                                                         setEditModeHandler,\r\n                                                         disableViewMode\r\n                                                     }): ReturnComponentType => {\r\n    return (\r\n        <>\r\n            <div className={style.view__btn} onClick={disableViewMode}>\r\n                <button type=\"button\">Hide contacts</button>\r\n            </div>\r\n            {\r\n                editMode\r\n                    ? (\r\n                        <>\r\n                            <ProfileDataForm\r\n                                initialValues={profile}\r\n                                profile={profile}\r\n                                onSubmit={onSubmit}\r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        <ProfileData\r\n                            profile={profile}\r\n                            isOwner={isOwner}\r\n                            goToEditMode={setEditModeHandler}\r\n                        />\r\n                    )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileEdit\r\n\r\n//types\r\ntype ProfileEditPropsType = {\r\n    editMode: boolean\r\n    profile: ProfileType\r\n    onSubmit: any\r\n    isOwner: boolean\r\n    setEditModeHandler: () => void\r\n    disableViewMode: () => void\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport style from \"./ProfileInfo.module.scss\"\r\n\r\nimport avatarDefault from '../../../../assets/images/avatar_for_profile.jpg'\r\nimport {ProfileType} from \"../../../../redux/profileReducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\r\nimport ProfileEdit from \"./ProfileEdit/ProfileEdit\";\r\nimport {ReturnComponentType} from \"../../../../types/ReturnComponentType\";\r\nimport {FIRST_ELEMENT_IN_ARRAY} from \"../../../../constants\";\r\nimport {Preloader} from \"../../../../common\";\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n                                                         profile,\r\n                                                         status,\r\n                                                         updateUserStatus,\r\n                                                         savePhoto,\r\n                                                         isOwner,\r\n                                                         saveProfile\r\n                                                     }): ReturnComponentType => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [viewMode, setViewMode] = useState<boolean>(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[FIRST_ELEMENT_IN_ARRAY])\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (formData: ProfileType): Promise<any> => {\r\n        await saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const setEditModeHandler = (): void => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const disableViewModeHandler = (): void => {\r\n        setViewMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            <div className={style.avatarBlock}>\r\n                <div className={style.avatar}>\r\n                    <img\r\n                        className={style.mainPhoto}\r\n                        alt='main avatar'\r\n                        src={\r\n                            profile\r\n                            && (profile.photos.large !== null)\r\n                                ? profile.photos.large\r\n                                : avatarDefault\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className={style.profile__inner}>\r\n                    <ProfileStatus\r\n                        isOwner={isOwner}\r\n                        status={status}\r\n                        updateUserStatus={updateUserStatus}\r\n                    />\r\n                    <div className={style.addedPhoto__btn}>\r\n                        {\r\n                            isOwner\r\n                            && <div className={style.avatarEdit}>\r\n                                <input\r\n                                    type={\"file\"}\r\n                                    onChange={(e) => onMainPhotoSelected(e)}\r\n                                    id=\"imageUpload\"\r\n                                    accept=\".png, .jpg, .jpeg\"\r\n                                />\r\n                                <label htmlFor=\"imageUpload\"> </label>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr/>\r\n            {\r\n                !viewMode\r\n                    ? (\r\n                        <div className={style.view__btn} onClick={() => setViewMode(true)}>\r\n                            <button type=\"button\">View contacts</button>\r\n                        </div>\r\n\r\n                    ) : (\r\n                        <ProfileEdit\r\n                            editMode={editMode}\r\n                            profile={profile}\r\n                            onSubmit={onSubmit}\r\n                            isOwner={isOwner}\r\n                            setEditModeHandler={setEditModeHandler}\r\n                            disableViewMode={disableViewModeHandler}\r\n                        />\r\n                    )\r\n            }\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo\r\n\r\n//types\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}","import React, {useState} from 'react';\r\nimport style from \"./Post.module.css\"\r\nimport {PostType, ProfileActions} from \"../../../../../redux/profileReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Nullable} from \"../../../../../types/Nullable\";\r\nimport {Undetectable} from \"../../../../../types/Undetectable\";\r\nimport {ReturnComponentType} from \"../../../../../types/ReturnComponentType\";\r\nimport {EMPTY_STRING} from \"../../../../../constants\";\r\nimport {getProfilePageProfilePhotosLargeSelector} from \"../../../../../selectors\";\r\n\r\nconst Post:React.FC<PostType> = (props): ReturnComponentType => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [fingerUp, setFingerUp] = useState<boolean>(false)\r\n\r\n    const userAvatar: Nullable<Undetectable<string>> = useSelector(getProfilePageProfilePhotosLargeSelector)\r\n\r\n    let heart = editMode ? style.active : style.notActive\r\n\r\n    const statusChangeHandler = (): void => {\r\n        setEditMode(!editMode)\r\n    }\r\n\r\n    const fingerUpChangeHandler = (): void => {\r\n        setFingerUp(!fingerUp)\r\n    }\r\n\r\n    const deletePostHandler = (id: number): void => {\r\n        dispatch(ProfileActions.deletePost(id))\r\n    }\r\n\r\n    return (\r\n        <div className={style.item}>\r\n            <div className={style.postAvatar}>\r\n                <img\r\n                    src={userAvatar ? userAvatar : EMPTY_STRING}\r\n                    alt=\"ava\"\r\n                    title=\"ava\"\r\n                />\r\n            </div>\r\n            <div className={style.itemText}>\r\n                {props.message}\r\n                <div className={style.activeBlock}>\r\n                    <span className={style.likeCounter} onClick={statusChangeHandler}>\r\n                        like: {editMode ? props.likesCount + 1 : props.likesCount}\r\n                        <span className={heart}>\r\n                            &#9829;\r\n                        </span>\r\n                    </span>\r\n                    <span className={style.likeCounter} onClick={fingerUpChangeHandler}>\r\n                        respect:\r\n                        {\r\n                            !fingerUp\r\n                                ? <span className={style.reaction}>&#128077;</span>\r\n                                : <span className={style.reaction}>&#128526;</span>\r\n                        }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div\r\n                onClick={() => deletePostHandler(props.id)}\r\n                className={style.delete__btn}\r\n            >\r\n                ❌\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, {SyntheticEvent} from 'react';\r\nimport style from \"./MyPosts.module.css\"\r\n\r\nimport Post from \"./Post/Post\";\r\nimport {UsersPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\nimport s from \"../../../Login/Login.module.scss\";\r\nimport {maxLengthCreator, required} from \"../../../../utils\";\r\nimport {ReturnComponentType} from \"../../../../types/ReturnComponentType\";\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nexport const MyPosts: React.FC<UsersPropsType> = React.memo(({profilePage, onAddPost}): ReturnComponentType => {\r\n\r\n    const post = profilePage.posts\r\n        .map(post =>\r\n            <Post\r\n                key={post.id}\r\n                message={post.message}\r\n                likesCount={post.likesCount}\r\n                id={post.id}\r\n            />)\r\n\r\n    const addPost = (values: AddNewPostFormType): void => {\r\n        onAddPost(values.AddNewPost)\r\n    }\r\n\r\n    return (\r\n        <div className={style.myPosts}>\r\n            <h3 className={style.post__title}>My posts :</h3>\r\n            <ReduxAddNewPostForm onSubmit={addPost}/>\r\n            <div className={style.posts}>\r\n                {post}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = ({\r\n                                                                             handleSubmit,\r\n                                                                             reset\r\n                                                                         }): ReturnComponentType => {\r\n\r\n    const onSubmit = (values: SyntheticEvent<any, Event>): void => {\r\n        handleSubmit(values)\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"AddNewPost\"}\r\n                    placeholder={\"Write your message ✉\"}\r\n                    validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div className={s.form__btn}>\r\n                <button type=\"submit\">Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxAddNewPostForm = reduxForm<AddNewPostFormType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\n//types\r\n\r\ntype AddNewPostFormType = {\r\n    AddNewPost: string\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {initialStateProfileType, ProfileActions} from \"../../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport {getProfilePageSelector} from \"../../../../selectors\";\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: getProfilePageSelector(state)\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToProps, {}, AppStateType>(mapStateToProps, {\r\n    onAddPost: ProfileActions.addPost\r\n})(MyPosts)\r\n\r\n//types=============\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: initialStateProfileType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    onAddPost: (newPostText: string) => void\r\n}","import React from 'react';\r\nimport style from \"./Profile.module.scss\"\r\n\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport {ReturnComponentType} from \"../../../types/ReturnComponentType\";\r\n\r\nconst Profile: React.FC<ProfilePropsType> = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}): ReturnComponentType => {\r\n\r\n    return (\r\n        <section className={style.profile}>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                updateUserStatus={updateUserStatus}\r\n                isOwner={isOwner}\r\n                savePhoto={savePhoto}\r\n                saveProfile={saveProfile}\r\n            />\r\n            {\r\n                isOwner\r\n                && <MyPostsContainer/>\r\n            }\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n\r\n//Types\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}","import React, {ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n\r\nimport {\r\n    getUserStatus,\r\n    getUserProfile,\r\n    ProfileType,\r\n    updateUserStatus, savePhoto, saveProfile\r\n} from \"../../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect/withAuthRedirect\";\r\nimport {Nullable} from \"../../../types/Nullable\";\r\nimport {withRouter2} from \"../../../hoc/withRouter/withRouter\";\r\nimport {InjectedProps} from \"../../../hoc/withRouter/types\";\r\nimport {\r\n    getAuthAuthorizedUserIDSelector,\r\n    getAuthIsAuthSelector,\r\n    getProfilePageProfileSelector,\r\n    getProfilePageStatusSelector\r\n} from \"../../../selectors\";\r\n\r\nclass ProfileAPIContainer extends React.Component<ProfilePropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: Nullable<string> = this.props.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserID;\r\n            if (!userId) {\r\n                //@ts-ignore\r\n                this.props.history.push(PATH.LOGIN)\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            throw new Error(\"ID should be exists\")\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getUserStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.userId !== prevProps.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateUserStatus={this.props.updateUserStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: getProfilePageProfileSelector(state),\r\n        isAuth: getAuthIsAuthSelector(state),\r\n        status: getProfilePageStatusSelector(state),\r\n        authorizedUserID: getAuthAuthorizedUserIDSelector(state),\r\n    }\r\n}\r\n\r\nconst ProfileContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        savePhoto,\r\n        saveProfile,\r\n    }),\r\n    withRouter2,\r\n    withAuthRedirect\r\n)(ProfileAPIContainer)\r\n\r\nexport default ProfileContainer\r\n\r\n//types===\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserID: Nullable<string>\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userId: Nullable<string>) => void\r\n    getUserStatus: (userId: Nullable<string>) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToProps & InjectedProps\r\n\r\n","import React from \"react\";\r\nimport {useLocation, useParams} from \"react-router-dom\";\r\nimport {WrappedComponentWithRouterPropsType} from \"./types\";\r\n\r\nexport const withRouter = (WrappedComponent: typeof React.Component) => (props: WrappedComponentWithRouterPropsType) => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const location = useLocation()\r\n\r\n    return (\r\n\r\n        <WrappedComponent\r\n            {...props}\r\n            userId={params.userId}\r\n            location={location}\r\n        />\r\n    )\r\n}\r\n\r\nexport const withRouter2 = <T  extends object> (WrappedComponent: React.ComponentType<T>) => (props: T) => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const location = useLocation()\r\n    return (\r\n\r\n        <WrappedComponent\r\n            {...props as T}\r\n            userId={params.userId}\r\n            location={location}\r\n        />\r\n    )\r\n}\r\n"],"sourceRoot":""}