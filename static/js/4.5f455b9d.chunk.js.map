{"version":3,"sources":["hoc/withAuthRedirect/withAuthRedirect.tsx","components/MainWindow/Messages/Messages.module.css","components/MainWindow/Messages/Message/Message.module.css","components/MainWindow/Messages/DialogItem/DialogsItem.module.css","components/MainWindow/Messages/Message/Message.tsx","components/MainWindow/Messages/DialogItem/DialogsItem.tsx","components/MainWindow/Messages/AddMessageForm/AddMessageForm.tsx","components/MainWindow/Messages/MessagesContainer.tsx","components/MainWindow/Messages/Messages.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","Message","className","c","message","DialogsItem","path","id","dialog","src","img","name","maxLength","maxLengthCreator","ReduxAddMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","MessagesContainer","compose","messagesPage","dispatch","addMessage","newMessageText","addMessageCreator","dialogsItem","users","map","u","messages","m","dialogs","dialogItem","values"],"mappings":"sMASMA,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAUhC,OAAOC,YAAQN,EAARM,EATmB,SAACC,GAAgC,IAEhDL,EAAwBK,EAAxBL,OAAWM,EAFoC,YAEvBD,EAFuB,YAItD,OAAKL,EAGE,cAACG,EAAD,eAAsBG,IAFlB,cAAC,IAAD,CAAUC,GAAI,gB,oBCpBjCC,EAAOC,QAAU,CAAC,QAAU,0BAA0B,WAAa,6BAA6B,OAAS,2B,oBCAzGD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,OAAS,8B,uGCUZC,EAPC,SAACL,GAEb,OACI,qBAAKM,UAAWC,IAAEC,QAAlB,SAA4BR,EAAMQ,W,0BCc3BC,EAhBK,SAACT,GAEjB,IAAIU,EAAO,aAAeV,EAAMW,GAEhC,OACI,sBAAKL,UAAWC,IAAEK,OAAlB,UACI,8BACI,qBAAKC,IAAKb,EAAMc,QAEpB,8BACI,cAAC,IAAD,CAASZ,GAAIQ,EAAb,SAAoBV,EAAMe,a,iCCTpCC,EAAYC,YAAiB,IAoBtBC,EAAsBC,YAA4B,CAACC,KAAM,wBAAnCD,EAlBmC,SAACnB,GACnE,OACI,uBAAMqB,SAAUrB,EAAMsB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACXV,KAAM,iBACNW,YAAa,qBACbC,SAAU,CAACC,IAAUZ,OAG7B,8BACI,yD,yBCYZa,EAAoBC,YAAuB/B,aAdzB,SAACL,GACnB,MAAO,CACHqC,aAAcrC,EAAMqC,iBAIH,SAACC,GACtB,MAAO,CACHC,WAAY,SAACC,GACTF,EAASG,YAAkBD,SAKqDrC,IAApEiC,ECrBA,SAAC9B,GAErB,IAAIoC,EAAcpC,EAAM+B,aAAaM,MAChCC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAwBxB,KAAMwB,EAAExB,KAAMJ,GAAI4B,EAAE5B,GAAIG,IAAKyB,EAAEzB,KAArCyB,EAAE5B,OAC9BH,EAAUR,EAAM+B,aAAaS,SAC5BF,KAAI,SAAAG,GAAC,OAAI,cAAC,EAAD,CAAoBjC,QAASiC,EAAEjC,QAASG,GAAI8B,EAAE9B,IAAhC8B,EAAE9B,OAM9B,OACI,sBAAKL,UAAWC,IAAEmC,QAAlB,UACI,qBAAKpC,UAAWC,IAAEoC,WAAlB,SACKP,IAEL,qBAAK9B,UAAWC,IAAEiC,SAAlB,SACKhC,IAEL,cAACU,EAAD,CAAqBG,SAZV,SAACuB,GAChB5C,EAAMiC,WAAWW,EAAOV,yBDejBL","file":"static/js/4.5f455b9d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(WrappedComponent: React.ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={'/login'}/>\r\n        }\r\n        return <WrappedComponent {...restProps as T} />\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Messages_dialogs__B3hpp\",\"dialogItem\":\"Messages_dialogItem__35EAN\",\"dialog\":\"Messages_dialog__2vHVG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__2CnlG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__HUIdv\"};","import React from 'react';\r\nimport c from \"./Message.module.css\"\r\nimport {MessageType} from \"../../../../redux/messagesReducer\";\r\n\r\nconst Message = (props: MessageType) => {\r\n\r\n    return (\r\n        <div className={c.message}>{props.message}</div>\r\n    );\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport c from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../../../redux/messagesReducer\";\r\n\r\nconst DialogsItem = (props: UserType) => {\r\n\r\n    let path = \"/messages/\" + props.id;\r\n\r\n    return (\r\n        <div className={c.dialog}>\r\n            <div>\r\n                <img src={props.img}/>\r\n            </div>\r\n            <div>\r\n                <NavLink to={path}>{props.name}</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogsItem;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {FormMessagesType} from \"../Messages\";\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormMessagesType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"newMessageText\"}\r\n                    placeholder={\"Write your message\"}\r\n                    validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ReduxAddMessageForm = reduxForm<FormMessagesType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {addMessageCreator, initialStateType} from \"../../../redux/messagesReducer\";\r\nimport {Messages} from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect/withAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    messagesPage: initialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType) : MapStateToPropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageText: string) => {\r\n            dispatch(addMessageCreator(newMessageText))\r\n        },\r\n    }\r\n}\r\n\r\nlet MessagesContainer = compose<ComponentType>(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)(Messages)\r\n\r\nexport default MessagesContainer\r\n","import React, {ChangeEvent} from 'react';\r\nimport c from \"./Messages.module.css\"\r\nimport Message from \"./Message/Message\";\r\nimport DialogsItem from \"./DialogItem/DialogsItem\";\r\nimport {UsersPropsType} from \"./MessagesContainer\";\r\nimport {ReduxAddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nexport type FormMessagesType = {\r\n    newMessageText: string\r\n}\r\n\r\nexport const Messages = (props: UsersPropsType) => {\r\n\r\n    let dialogsItem = props.messagesPage.users\r\n        .map(u => <DialogsItem key={u.id} name={u.name} id={u.id} img={u.img}/>)\r\n    let message = props.messagesPage.messages\r\n        .map(m => <Message key={m.id} message={m.message} id={m.id}/>)\r\n\r\n    const addMessage = (values: FormMessagesType) => {\r\n        props.addMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={c.dialogs}>\r\n            <div className={c.dialogItem}>\r\n                {dialogsItem}\r\n            </div>\r\n            <div className={c.messages}>\r\n                {message}\r\n            </div>\r\n            <ReduxAddMessageForm onSubmit={addMessage}/>\r\n        </div>\r\n    );\r\n}"],"sourceRoot":""}