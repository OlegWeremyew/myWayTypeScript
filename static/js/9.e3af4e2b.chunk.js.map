{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.scss","components/Login/Login.module.scss","components/Login/Login.tsx"],"names":["FormControl","meta","touched","error","children","hasError","styleError","styles","EMPTY_STRING","className","Textarea","props","input","restProps","textarea","Input","createField","placeholder","name","validators","component","text","validate","module","exports","Login","dispatch","useDispatch","captchaUrl","useSelector","getAuthCaptchaUrlSelector","getAuthIsAuthSelector","to","PATH","PROFILE","s","login__block","login__title","LoginReduxForm","onSubmit","formData","login","email","password","rememberMe","captcha","reduxForm","form","handleSubmit","input__form","required","type","checkbox__form","src","alt","style","formSummaryError","form__btn"],"mappings":"4RASMA,EAAoD,SAAC,GAA6D,IAAD,IAA3DC,KAAOC,EAAoD,EAApDA,QAASC,EAA2C,EAA3CA,MAAQC,EAAmC,EAAnCA,SAE1EC,EAAWH,GAAWC,EACtBG,EAAaD,EAAWE,IAAOJ,MAAQK,IAE7C,OACI,sBAAKC,UAAWF,IAAOP,YAAc,IAAMM,EAA3C,UACI,8BACKF,IAEL,8BAEQC,GACG,+BAAOF,UAOjBO,EAAwC,SAACC,GAAW,IACtDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD8C,YACxBU,EADwB,mBAE5D,OACI,cAACX,EAAD,2BAAiBW,GAAjB,aACI,kDAAUF,UAAWF,IAAOO,UAAcF,GAAWC,QAKpDE,EAAqC,SAACJ,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD2C,YACrBU,EADqB,mBAEzD,OACI,cAACX,EAAD,2BAAiBW,GAAjB,aACI,+CAAQF,UAAWF,IAAOK,OAAWA,GAAWC,QAKrD,SAASG,EAA8BC,EAA+BC,EAASC,EAAqCC,EAA0BT,EAAyBU,GAC1K,OACI,gCACI,cAAC,IAAD,aACIJ,YAAaA,EACbC,KAAMA,EACNE,UAAWA,EACXE,SAAUH,GACNR,IANZ,IAOQU,O,oBCvDhBE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wCAAwC,SAAW,kC,oBCA9KD,EAAOC,QAAU,CAAC,aAAe,4BAA4B,aAAe,4BAA4B,YAAc,2BAA2B,eAAiB,8BAA8B,UAAY,2B,iCCD5M,2HA0CeC,UA1BS,WAEpB,IAAMC,EAAWC,cAEXC,EAA+BC,YAAYC,KAOjD,OANwBD,YAAYE,KAOzB,cAAC,IAAD,CAAUC,GAAIC,IAAKC,UAI1B,0BAASzB,UAAW0B,IAAEC,aAAtB,UACI,oBAAI3B,UAAW0B,IAAEE,aAAjB,mBACA,cAACC,EAAD,CACIC,SAZK,SAACC,GACdd,EAASe,YAAMD,EAASE,MAAOF,EAASG,SAAUH,EAASI,WAAYJ,EAASK,WAYxEjB,WAAYA,QAQ5B,IA6BMU,EAAiBQ,YAA2C,CAACC,KAAM,SAAlDD,EA7B6E,SAAC,GAI4B,IAHxBE,EAGuB,EAHvBA,aACA7C,EAEuB,EAFvBA,MACAyB,EACuB,EADvBA,WAErG,OACI,uBAAMW,SAAUS,EAAhB,UACI,qBAAKvC,UAAW0B,IAAEc,YAAlB,SACKjC,YAAqC,QAAS,QAAS,CAACkC,KAAWnC,IAAO,CAACoC,KAAM,WAEtF,qBAAK1C,UAAW0B,IAAEc,YAAlB,SACKjC,YAAqC,WAAY,WAAY,CAACkC,KAAWnC,IAAO,CAACoC,KAAM,eAE5F,qBAAK1C,UAAW0B,IAAEiB,eAAlB,SACKpC,YAAqC,KAAM,aAAc,GAAID,IAAO,CAACoC,KAAM,YAAa,iBAG5FvB,GAAc,qBAAKyB,IAAKzB,EAAY0B,IAAI,eACxCnD,GAAS,qBAAKM,UAAW8C,IAAMC,iBAAtB,SAAyCrD,IAElDyB,GAAcZ,YAAqC,qBAAsB,UAAW,CAACkC,KAAWnC,IAAO,CAACoC,KAAM,SAC9GvB,GAAc,wBAAQuB,KAAM,SAAd,yBACf,qBAAK1C,UAAW0B,IAAEsB,UAAlB,SACI,wBAAQN,KAAK,SAAb","file":"static/js/9.e3af4e2b.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport styles from './FormsControls.module.scss'\r\n\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {Validator} from \"redux-form/lib/Field\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {EMPTY_STRING} from \"../../constants\";\r\nimport {ReturnComponentType} from \"../../types/ReturnComponentType\";\r\n\r\nconst FormControl: React.FC<FormControlPropsParamsType> = ({meta: {touched, error}, children}): ReturnComponentType => {\r\n\r\n    const hasError = touched && error\r\n    const styleError = hasError ? styles.error : EMPTY_STRING\r\n\r\n    return (\r\n        <div className={styles.FormControl + \" \" + styleError}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {\r\n                    hasError\r\n                    && <span>{error}</span>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea className={styles.textarea} {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input  className={styles.input} {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<T extends string>(placeholder: Nullable<string>, name: T, validators: Validator | Validator[], component: componentType, props: { type: string }, text?: string) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n//types====\r\n\r\ntype FormControlPropsParamsType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport type  LoginFormValuesKeysType = Extract<keyof LoginFormValuesType, string>\r\n\r\ntype componentType = \"input\" | \"select\" | \"textarea\" | ComponentType<WrappedFieldProps> | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__16I1n\",\"error\":\"FormsControls_error__dMqpf\",\"formSummaryError\":\"FormsControls_formSummaryError__2k5qi\",\"textarea\":\"FormsControls_textarea__3h9ML\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__block\":\"Login_login__block__2h76V\",\"login__title\":\"Login_login__title__3yyRU\",\"input__form\":\"Login_input__form__dPp6f\",\"checkbox__form\":\"Login_checkbox__form__3rk2n\",\"form__btn\":\"Login_form__btn__cQeTw\"};","import React from 'react';\r\nimport style from \"../../common/FormsControls/FormsControls.module.scss\"\r\nimport s from \"./Login.module.scss\"\r\n\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input, LoginFormValuesKeysType} from \"../../common/FormsControls/FormsControls\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {PATH} from \"../../enums\";\r\nimport {ReturnComponentType} from \"../../types/ReturnComponentType\";\r\nimport {required} from \"../../utils\";\r\nimport {getAuthCaptchaUrlSelector, getAuthIsAuthSelector} from \"../../selectors\";\r\nimport {login} from \"../../redux/authReducer\";\r\n\r\n\r\nconst Login: React.FC = (): ReturnComponentType => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const captchaUrl: Nullable<string> = useSelector(getAuthCaptchaUrlSelector)\r\n    const isAuth: boolean = useSelector(getAuthIsAuthSelector)\r\n\r\n    const onSubmit = (formData: FormDataType): void => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <section className={s.login__block}>\r\n            <h1 className={s.login__title}>Login</h1>\r\n            <LoginReduxForm\r\n                onSubmit={onSubmit}\r\n                captchaUrl={captchaUrl}\r\n            />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnProps> & LoginFormOwnProps> = ({\r\n                                                                                                         handleSubmit,\r\n                                                                                                         error,\r\n                                                                                                         captchaUrl\r\n                                                                                                     }): ReturnComponentType => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={s.input__form}>\r\n                {createField<LoginFormValuesKeysType>(\"Email\", \"email\", [required], Input, {type: \"text\"})}\r\n            </div>\r\n            <div className={s.input__form}>\r\n                {createField<LoginFormValuesKeysType>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            </div>\r\n            <div className={s.checkbox__form}>\r\n                {createField<LoginFormValuesKeysType>(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"Remember me\")}\r\n            </div>\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt='captchaUrl'/>}\r\n            {error && <div className={style.formSummaryError}>{error}</div>}\r\n\r\n            {captchaUrl && createField<LoginFormValuesKeysType>('Symbols from image', 'captcha', [required], Input, {type: \"text\"})}\r\n            {captchaUrl && <button type={'submit'}>Get Started</button>}\r\n            <div className={s.form__btn}>\r\n                <button type=\"submit\">Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormOwnProps>({form: \"Login\"})(LoginForm)\r\n\r\n\r\n//Types==============================================\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n    checkbox: boolean\r\n}\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: Nullable<string>\r\n}"],"sourceRoot":""}