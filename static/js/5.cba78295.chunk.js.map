{"version":3,"sources":["pages/Chat/Chat/AddMessageForm/AddMessageForm.module.css","pages/Chat/Chat/Chat.module.scss","pages/Chat/Chat/Messages/Message/Message.module.css","pages/Chat/Chat/Messages/Messages.module.css","pages/Chat/ChatPage.module.scss","pages/Chat/Chat/AddMessageForm/AddMessageForm.tsx","pages/Chat/Chat/Messages/Message/Message.tsx","pages/Chat/Chat/Messages/Messages.tsx","pages/Chat/Chat/Chat.tsx","pages/Chat/ChatPage.tsx"],"names":["module","exports","AddMessageForm","dispatch","useDispatch","useState","EMPTY_STRING","message","setMessage","status","useSelector","getChatStatusSelector","className","style","textarea","placeholder","value","onChange","e","addMessageText","currentTarget","onKeyPress","key","sendMessage","form__btn","onClick","trim","type","disabled","Message","React","memo","navLinkPath","PATH","PROFILE","userId","message__item","to","message__img","src","photo","alt","title","userName","message__userName","message__text","Messages","isAutoScroll","setIsAutoScroll","messages","getChatMessagesSelector","messagesAnchorRef","useRef","useEffect","current","scrollIntoView","behavior","chat__item","onScroll","element","Math","abs","scrollHeight","scrollTop","clientHeight","map","id","ref","Chat","startMessagesListening","stopMessagesListening","chatBlock","ChatPage","chatPageBlock","chatPage__title"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,UAAY,kCAAkC,SAAW,mC,oBCA3ED,EAAOC,QAAU,CAAC,UAAY,0B,oBCA9BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,kBAAoB,mCAAmC,aAAe,8BAA8B,cAAgB,iC,oBCAxND,EAAOC,QAAU,CAAC,WAAa,+B,oBCA/BD,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,gBAAkB,oC,6HCWvEC,EAA2B,WACtC,IAAMC,EAAWC,cAEjB,EAA8BC,mBAAiBC,KAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAA0BC,YAAYC,KAmB5C,OACE,gCACE,0BACEC,UAAWC,IAAMC,SACjBC,YAAY,4BACZC,MAAOT,EACPU,SAAU,SAAAC,GAAC,OAVM,SAACA,GACtBV,EAAWU,GASQC,CAAeD,EAAEE,cAAcJ,QAC9CK,WAlBoB,SAACH,GACX,UAAVA,EAAEI,MACJnB,EAASoB,YAAYhB,IACrBC,EAAWF,SAiBX,qBAAKM,UAAWC,IAAMW,UAAWC,QA1BV,WACpBlB,EAAQmB,SACbvB,EAASoB,YAAYhB,IACrBC,EAAWF,OAuBT,SACE,wBAAQqB,KAAK,SAASC,SAAqB,UAAXnB,EAAhC,wB,oDCpCKoB,EAAiCC,IAAMC,MAClD,YAAuC,IAApCxB,EAAmC,EAAnCA,QACKyB,EAAW,UAAMC,IAAKC,QAAX,YAAsB3B,EAAQ4B,QAE/C,OACE,qCACE,sBAAKvB,UAAWC,IAAMN,QAAtB,UACE,sBAAKK,UAAWC,IAAMuB,cAAtB,UACE,cAAC,IAAD,CAASC,GAAIL,EAAb,SACE,qBACEpB,UAAWC,IAAMyB,aACjBC,IAAKhC,EAAQiC,MACbC,IAAI,SACJC,MAAK,iBAAYnC,EAAQoC,cAG7B,qBAAK/B,UAAWC,IAAM+B,kBAAtB,SAA0CrC,EAAQoC,WAClD,0BAEF,qBAAK/B,UAAWC,IAAMgC,cAAtB,SAAsCtC,EAAQA,aAEhD,6B,kBCpBKuC,EAAqB,WAChC,IAAM3C,EAAWC,cACjB,EAAwCC,oBAAkB,GAA1D,mBAAO0C,EAAP,KAAqBC,EAArB,KAEMC,EAA8BvC,YAAYwC,KAC1CC,EAAoBC,iBAAuB,MAkBjD,OANAC,qBAAU,WACW,IAAD,EAAdN,IACF,UAAAI,EAAkBG,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAEvD,CAACrD,EAAU8C,EAAUF,IAGtB,sBAAKnC,UAAWC,IAAM4C,WAAYC,SAjBd,SAACxC,GACrB,IAAMyC,EAAUzC,EAAEE,cAEdwC,KAAKC,IAAIF,EAAQG,aAAeH,EAAQI,WAAaJ,EAAQK,aAAe,KAC7EjB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWlC,UACGC,EAASgB,KAAI,SAAA1D,GAAO,OACnB,cAACsB,EAAD,CAA0BtB,QAASA,GAArBA,EAAQ2D,OAExB,qBAAKC,IAAKhB,QCvBHiB,EAAiB,WAC5B,IAAMjE,EAAWC,cAEXK,EAA0BC,YAAYC,KAS5C,OAPA0C,qBAAU,WAER,OADAlD,EAASkE,eACF,WACLlE,EAASmE,kBAEV,CAACnE,IAGF,qCACc,UAAXM,GAAsB,gFACvB,sBAAKG,UAAWC,IAAM0D,UAAtB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,W,kBCnBOC,UAPY,kBACzB,0BAAS5D,UAAWC,IAAM4D,cAA1B,UACE,qBAAK7D,UAAWC,IAAM6D,gBAAtB,yBACA,cAAC,EAAD","file":"static/js/5.cba78295.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__btn\":\"AddMessageForm_form__btn__1A1Fo\",\"textarea\":\"AddMessageForm_textarea__1SV0Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBlock\":\"Chat_chatBlock__3pIRB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3voQ6\",\"message__item\":\"Message_message__item__34l0T\",\"message__userName\":\"Message_message__userName__2hie8\",\"message__img\":\"Message_message__img__2yvRa\",\"message__text\":\"Message_message__text__36qp9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat__item\":\"Messages_chat__item__rvdcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatPageBlock\":\"ChatPage_chatPageBlock__1fsnk\",\"chatPage__title\":\"ChatPage_chatPage__title__3SkW7\"};","import React, { useState, KeyboardEvent } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ReadyStatusType } from '../../../../Api/chatApi/types';\nimport { EMPTY_STRING } from '../../../../constants';\nimport { sendMessage } from '../../../../redux/chatReducer';\nimport { getChatStatusSelector } from '../../../../selectors';\nimport { ReturnComponentType } from '../../../../types/ReturnComponentType';\n\nimport style from './AddMessageForm.module.css';\n\nexport const AddMessageForm: React.FC = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const [message, setMessage] = useState<string>(EMPTY_STRING);\n\n  const status: ReadyStatusType = useSelector(getChatStatusSelector);\n\n  const sendMessageHandler = (): void => {\n    if (!message.trim()) return;\n    dispatch(sendMessage(message));\n    setMessage(EMPTY_STRING);\n  };\n\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>): void => {\n    if (e.key === 'Enter') {\n      dispatch(sendMessage(message));\n      setMessage(EMPTY_STRING);\n    }\n  };\n\n  const addMessageText = (e: string): void => {\n    setMessage(e);\n  };\n\n  return (\n    <div>\n      <textarea\n        className={style.textarea}\n        placeholder=\"write your message âœ‰\"\n        value={message}\n        onChange={e => addMessageText(e.currentTarget.value)}\n        onKeyPress={onKeyPressHandler}\n      />\n      <div className={style.form__btn} onClick={sendMessageHandler}>\n        <button type=\"submit\" disabled={status !== 'ready'}>\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nimport { PATH } from '../../../../../enums';\nimport { ReturnComponentType } from '../../../../../types/ReturnComponentType';\n\nimport style from './Message.module.css';\nimport { MessageType } from './types';\n\nexport const Message: React.FC<MessageType> = React.memo(\n  ({ message }): ReturnComponentType => {\n    const navLinkPath = `${PATH.PROFILE}/${message.userId}`;\n\n    return (\n      <>\n        <div className={style.message}>\n          <div className={style.message__item}>\n            <NavLink to={navLinkPath}>\n              <img\n                className={style.message__img}\n                src={message.photo}\n                alt=\"avatar\"\n                title={`avatar ${message.userName}`}\n              />\n            </NavLink>\n            <div className={style.message__userName}>{message.userName}</div>\n            <br />\n          </div>\n          <div className={style.message__text}>{message.message}</div>\n        </div>\n        <hr />\n      </>\n    );\n  },\n);\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ChatMessageType } from '../../../../redux/chatReducer/types';\nimport { getChatMessagesSelector } from '../../../../selectors';\nimport { ReturnComponentType } from '../../../../types/ReturnComponentType';\n\nimport { Message } from './Message';\nimport style from './Messages.module.css';\n\nexport const Messages: React.FC = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n  const [isAutoScroll, setIsAutoScroll] = useState<boolean>(false);\n\n  const messages: ChatMessageType[] = useSelector(getChatMessagesSelector);\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\n\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>): void => {\n    const element = e.currentTarget;\n\n    if (Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight < 300) {\n      !isAutoScroll && setIsAutoScroll(true);\n    } else {\n      isAutoScroll && setIsAutoScroll(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [dispatch, messages, isAutoScroll]);\n\n  return (\n    <div className={style.chat__item} onScroll={scrollHandler}>\n      {messages.map(message => (\n        <Message key={message.id} message={message} />\n      ))}\n      <div ref={messagesAnchorRef} />\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ReadyStatusType } from '../../../Api/chatApi/types';\nimport {\n  startMessagesListening,\n  stopMessagesListening,\n} from '../../../redux/chatReducer';\nimport { getChatStatusSelector } from '../../../selectors';\nimport { ReturnComponentType } from '../../../types/ReturnComponentType';\n\nimport { AddMessageForm } from './AddMessageForm';\nimport style from './Chat.module.scss';\nimport { Messages } from './Messages';\n\nexport const Chat: React.FC = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const status: ReadyStatusType = useSelector(getChatStatusSelector);\n\n  useEffect(() => {\n    dispatch(startMessagesListening());\n    return () => {\n      dispatch(stopMessagesListening());\n    };\n  }, [dispatch]);\n\n  return (\n    <>\n      {status === 'error' && <div>Some error occurred. Please refresh this page</div>}\n      <div className={style.chatBlock}>\n        <Messages />\n        <AddMessageForm />\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nimport { ReturnComponentType } from '../../types/ReturnComponentType';\n\nimport { Chat } from './Chat';\nimport style from './ChatPage.module.scss';\n\nconst ChatPage: React.FC = (): ReturnComponentType => (\n  <section className={style.chatPageBlock}>\n    <div className={style.chatPage__title}>Common chat</div>\n    <Chat />\n  </section>\n);\n\nexport default ChatPage;\n"],"sourceRoot":""}