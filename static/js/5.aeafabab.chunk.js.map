{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.tsx","hoc/withAuthRedirect/withAuthRedirect.tsx","components/MainWindow/Messages/Messages.module.css","components/MainWindow/Messages/Message/Message.module.css","components/MainWindow/Messages/DialogItem/DialogsItem.module.css","components/MainWindow/Messages/Message/Message.tsx","components/MainWindow/Messages/DialogItem/DialogsItem.tsx","components/MainWindow/Messages/AddMessageForm/AddMessageForm.tsx","components/MainWindow/Messages/MessagesContainer.tsx","components/MainWindow/Messages/Messages.tsx"],"names":["FormControl","meta","touched","error","children","hasError","styleError","styles","className","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","Message","c","message","DialogsItem","path","id","dialog","src","img","alt","ReduxAddMessageForm","reduxForm","form","onSubmit","handleSubmit","Field","MessagesContainer","compose","messagesPage","addMessage","MessageActions","dialogsItem","users","map","u","messages","m","dialogs","dialogItem","values","newMessageText"],"mappings":"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","file":"static/js/5.aeafabab.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {Validator} from \"redux-form/lib/Field\";\r\n\r\nconst FormControl: React.FC<FormControlPropsParamsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error\r\n    const styleError = hasError ? styles.error : \"\"\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + styleError}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<T extends string>(placeholder: string | null, name: T, validators: Validator | Validator[], component: componentType, props: { type: string }, text?: string) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n//types====\r\n\r\ntype FormControlPropsParamsType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport type  LoginFormValuesKeysType = Extract<keyof LoginFormValuesType, string>\r\n\r\ntype componentType = \"input\" | \"select\" | \"textarea\" | ComponentType<WrappedFieldProps> | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3bb8c\",\"error\":\"FormsControls_error__17NH9\",\"formSummaryError\":\"FormsControls_formSummaryError__1kRrY\"};","import React from 'react';\r\n\r\nexport const required = (value: string): ReturnValidatorType => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string): ReturnValidatorType => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n//types\r\nexport type ReturnValidatorType = string | undefined","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(WrappedComponent: React.ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={'/login'}/>\r\n        }\r\n        return <WrappedComponent {...restProps as T} />\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n//types============\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Messages_dialogs__2a5ir\",\"dialogItem\":\"Messages_dialogItem__1fljT\",\"dialog\":\"Messages_dialog__amYKR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1_lWt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__26p68\"};","import React from 'react';\r\nimport c from \"./Message.module.css\"\r\nimport {MessageType} from \"../../../../redux/messagesReducer\";\r\n\r\nconst Message = (props: MessageType) => {\r\n\r\n    return (\r\n        <div className={c.message}>{props.message}</div>\r\n    );\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport c from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../../../redux/messagesReducer\";\r\n\r\nconst DialogsItem = (props: UserType) => {\r\n\r\n    const path = \"/messages/\" + props.id;\r\n\r\n    return (\r\n        <div className={c.dialog}>\r\n            <div>\r\n                <img src={props.img} alt=\"dialogs item\"/>\r\n            </div>\r\n            <div>\r\n                <NavLink to={path}>{props.name}</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItem;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {FormMessagesType} from \"../Messages\";\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormMessagesType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"newMessageText\"}\r\n                    placeholder={\"Write your message\"}\r\n                    validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ReduxAddMessageForm = reduxForm<FormMessagesType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {initialStateType, MessageActions} from \"../../../redux/messagesReducer\";\r\nimport {Messages} from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect/withAuthRedirect\";\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\n\r\nconst MessagesContainer = compose<ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n        addMessage: MessageActions.addMessage\r\n    }), withAuthRedirect\r\n)(Messages)\r\n\r\nexport default MessagesContainer\r\n\r\n//types===================\r\ntype MapStateToPropsType = {\r\n    messagesPage: initialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","import React from 'react';\r\nimport c from \"./Messages.module.css\"\r\nimport Message from \"./Message/Message\";\r\nimport DialogsItem from \"./DialogItem/DialogsItem\";\r\nimport {UsersPropsType} from \"./MessagesContainer\";\r\nimport {ReduxAddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nexport const Messages = ({messagesPage, addMessage}: UsersPropsType) => {\r\n\r\n    const dialogsItem = messagesPage.users\r\n        .map(u => <DialogsItem key={u.id} name={u.name} id={u.id} img={u.img}/>)\r\n    const message = messagesPage.messages\r\n        .map(m => <Message key={m.id} message={m.message} id={m.id}/>)\r\n\r\n    const addNewMessage = (values: FormMessagesType) => {\r\n        addMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={c.dialogs}>\r\n            <div className={c.dialogItem}>\r\n                {dialogsItem}\r\n            </div>\r\n            <div className={c.messages}>\r\n                {message}\r\n            </div>\r\n            <ReduxAddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type FormMessagesType = {\r\n    newMessageText: string\r\n}"],"sourceRoot":""}