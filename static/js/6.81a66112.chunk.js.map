{"version":3,"sources":["pages/Chat/Chat/Messages/Messages.module.css","pages/Chat/Chat/Messages/Message/Message.module.css","pages/Chat/Chat/AddMessageForm/AddMessageForm.module.css","pages/Chat/Chat/Chat.module.scss","pages/Chat/ChatPage.module.scss","pages/Chat/Chat/Messages/Message/Message.tsx","pages/Chat/Chat/Messages/Messages.tsx","pages/Chat/Chat/AddMessageForm/AddMessageForm.tsx","pages/Chat/Chat/Chat.tsx","pages/Chat/ChatPage.tsx"],"names":["module","exports","Message","React","memo","message","navLinkPath","PATH","PROFILE","userId","className","style","message__item","to","message__img","src","photo","alt","title","userName","message__userName","message__text","Messages","dispatch","useDispatch","useState","isAutoScroll","setIsAutoScroll","messages","useSelector","getChatMessagesSelector","messagesAnchorRef","useRef","useEffect","current","scrollIntoView","behavior","chat__item","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","id","ref","AddMessageForm","EMPTY_STRING","setMessage","status","getChatStatusSelector","textarea","placeholder","value","onChange","addMessageText","onKeyPress","key","sendMessage","form__btn","onClick","trim","disabled","Chat","startMessagesListening","stopMessagesListening","chatBlock","ChatPage","chatPageBlock","chatPage__title"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,WAAa,+B,oBCA/BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,kBAAoB,mCAAmC,aAAe,8BAA8B,cAAgB,iC,oBCAxND,EAAOC,QAAU,CAAC,UAAY,kCAAkC,SAAW,mC,oBCA3ED,EAAOC,QAAU,CAAC,UAAY,0B,oBCA9BD,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,gBAAkB,oC,sICMvEC,EAAiCC,IAAMC,MAAK,YAAqC,IAAnCC,EAAkC,EAAlCA,QAEjDC,EAAW,UAAMC,IAAKC,QAAX,YAAsBH,EAAQI,QAE3C,OACI,qCACI,sBAAKC,UAAWC,IAAMN,QAAtB,UACI,sBAAKK,UAAWC,IAAMC,cAAtB,UACI,cAAC,IAAD,CAASC,GAAIP,EAAb,SACI,qBACII,UAAWC,IAAMG,aACjBC,IAAKV,EAAQW,MACbC,IAAI,SACJC,MAAK,iBAAYb,EAAQc,cAGjC,qBAAKT,UAAWC,IAAMS,kBAAtB,SACKf,EAAQc,WAEb,0BAEJ,qBAAKT,UAAWC,IAAMU,cAAtB,SACKhB,EAAQA,aAGjB,6B,QCvBHiB,EAAqB,WAE9B,IAAMC,EAAWC,cAFwC,EAGjBC,oBAAkB,GAHD,mBAGlDC,EAHkD,KAGpCC,EAHoC,KAKnDC,EAA8BC,YAAYC,KAC1CC,EAAoBC,iBAAuB,MAoBjD,OANAC,qBAAU,WACa,IAAD,EAAdP,IACA,UAAAK,EAAkBG,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACb,EAAUK,EAAUF,IAGpB,sBAAKhB,UAAWC,IAAM0B,WAAYC,SAnBhB,SAACC,GAEnB,IAAMC,EAAUD,EAAEE,cAEdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,WAAaL,EAAQM,aAAe,KAC3EpB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAYpC,UAEQC,EAASmB,KAAI,SAAC1C,GACV,OACI,cAACH,EAAD,CAEIG,QAASA,GADJA,EAAQ2C,OAM7B,qBAAKC,IAAKlB,Q,kCCrCTmB,EAA2B,WAEpC,IAAM3B,EAAWC,cAF8C,EAIjCC,mBAAiB0B,KAJgB,mBAIxD9C,EAJwD,KAI/C+C,EAJ+C,KAMzDC,EAA0BxB,YAAYyB,KAmB5C,OACI,gCACI,0BACI5C,UAAWC,IAAM4C,SACjBC,YAAa,4BACbC,MAAOpD,EACPqD,SAAU,SAACnB,GAAD,OAVC,SAACA,GACpBa,EAAWb,GAScoB,CAAepB,EAAEE,cAAcgB,QAChDG,WAlBc,SAACrB,GACT,UAAVA,EAAEsB,MACFtC,EAASuC,YAAYzD,IACrB+C,EAAWD,SAiBX,qBAAKzC,UAAWC,IAAMoD,UAAWC,QA1Bd,WAClB3D,EAAQ4D,SACb1C,EAASuC,YAAYzD,IACrB+C,EAAWD,OAuBP,SACI,wBAAQe,SAAqB,UAAXb,EAAlB,wB,kBClCHc,EAAiB,WAE1B,IAAM5C,EAAWC,cAEX6B,EAA0BxB,YAAYyB,KAS5C,OAPArB,qBAAU,WAEN,OADAV,EAAS6C,eACF,WACH7C,EAAS8C,kBAEd,CAAC9C,IAGA,qCAEmB,UAAX8B,GACG,gFAEP,sBAAK3C,UAAWC,IAAM2D,UAAtB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,W,kBChBDC,UAXY,WACvB,OACI,0BAAS7D,UAAWC,IAAM6D,cAA1B,UACI,qBAAK9D,UAAWC,IAAM8D,gBAAtB,yBAGA,cAAC,EAAD","file":"static/js/6.81a66112.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat__item\":\"Messages_chat__item__rvdcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3voQ6\",\"message__item\":\"Message_message__item__34l0T\",\"message__userName\":\"Message_message__userName__2hie8\",\"message__img\":\"Message_message__img__2yvRa\",\"message__text\":\"Message_message__text__36qp9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__btn\":\"AddMessageForm_form__btn__1A1Fo\",\"textarea\":\"AddMessageForm_textarea__1SV0Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBlock\":\"Chat_chatBlock__3pIRB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatPageBlock\":\"ChatPage_chatPageBlock__1fsnk\",\"chatPage__title\":\"ChatPage_chatPage__title__3SkW7\"};","import React from 'react';\r\nimport style from './Message.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../../enums\";\r\nimport {ReturnComponentType} from \"../../../../../types/ReturnComponentType\";\r\nimport {ChatMessageType} from \"../../../../../redux/chatReducer/types\";\r\n\r\nexport const Message: React.FC<MessageType> = React.memo(({message}): ReturnComponentType => {\r\n\r\n    const navLinkPath = `${PATH.PROFILE}/${message.userId}`\r\n\r\n        return (\r\n            <>\r\n                <div className={style.message}>\r\n                    <div className={style.message__item}>\r\n                        <NavLink to={navLinkPath}>\r\n                            <img\r\n                                className={style.message__img}\r\n                                src={message.photo}\r\n                                alt=\"avatar\"\r\n                                title={`avatar ${message.userName}`}\r\n                            />\r\n                        </NavLink>\r\n                        <div className={style.message__userName}>\r\n                            {message.userName}\r\n                        </div>\r\n                        <br/>\r\n                    </div>\r\n                    <div className={style.message__text}>\r\n                        {message.message}\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n            </>\r\n        )\r\n    }\r\n)\r\n\r\ntype MessageType = {\r\n    message: ChatMessageType\r\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport style from './Messages.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {Message} from \"./Message/Message\";\r\nimport {ReturnComponentType} from \"../../../../types/ReturnComponentType\";\r\nimport {ChatMessageType} from \"../../../../redux/chatReducer/types\";\r\nimport {getChatMessagesSelector} from \"../../../../selectors\";\r\n\r\nexport const Messages: React.FC = (): ReturnComponentType => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(false)\r\n\r\n    const messages: ChatMessageType[] = useSelector(getChatMessagesSelector)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>): void => {\r\n\r\n        const element = e.currentTarget\r\n\r\n        if (Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [dispatch, messages, isAutoScroll])\r\n\r\n    return (\r\n        <div className={style.chat__item} onScroll={scrollHandler}>\r\n            {\r\n                messages.map((message) => {\r\n                    return (\r\n                        <Message\r\n                            key={message.id}\r\n                            message={message}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            <div ref={messagesAnchorRef}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, KeyboardEvent} from 'react';\r\nimport style from './AddMessageForm.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {ReadyStatusType} from \"../../../../Api/chatApi/types\";\r\nimport {ReturnComponentType} from \"../../../../types/ReturnComponentType\";\r\nimport {EMPTY_STRING} from \"../../../../constants\";\r\nimport {getChatStatusSelector} from \"../../../../selectors\";\r\nimport {sendMessage} from \"../../../../redux/chatReducer\";\r\n\r\nexport const AddMessageForm: React.FC = (): ReturnComponentType => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [message, setMessage] = useState<string>(EMPTY_STRING)\r\n\r\n    const status: ReadyStatusType = useSelector(getChatStatusSelector)\r\n\r\n    const sendMessageHandler = (): void => {\r\n        if (!message.trim()) return\r\n        dispatch(sendMessage(message))\r\n        setMessage(EMPTY_STRING)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            dispatch(sendMessage(message))\r\n            setMessage(EMPTY_STRING)\r\n        }\r\n    }\r\n\r\n    const addMessageText = (e: string) => {\r\n        setMessage(e)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <textarea\r\n                className={style.textarea}\r\n                placeholder={\"write your message âœ‰\"}\r\n                value={message}\r\n                onChange={(e) => addMessageText(e.currentTarget.value)}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <div className={style.form__btn} onClick={sendMessageHandler}>\r\n                <button disabled={status !== 'ready'}>\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\nimport style from './Chat.module.scss'\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ReadyStatusType} from \"../../../Api/chatApi/types\";\r\nimport {ReturnComponentType} from \"../../../types/ReturnComponentType\";\r\nimport {getChatStatusSelector} from \"../../../selectors\";\r\nimport {startMessagesListening, stopMessagesListening} from \"../../../redux/chatReducer\";\r\n\r\nexport const Chat: React.FC = (): ReturnComponentType => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status: ReadyStatusType = useSelector(getChatStatusSelector)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                status === 'error'\r\n                && <div>Some error occurred. Please refresh this page</div>\r\n            }\r\n            <div className={style.chatBlock}>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Chat} from \"./Chat/Chat\";\r\nimport style from './ChatPage.module.scss'\r\nimport {ReturnComponentType} from \"../../types/ReturnComponentType\";\r\n\r\nconst ChatPage: React.FC = (): ReturnComponentType => {\r\n    return (\r\n        <section className={style.chatPageBlock}>\r\n            <div className={style.chatPage__title}>\r\n                Common chat\r\n            </div>\r\n            <Chat/>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ChatPage\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string,\r\n    photo: string\r\n    userId: number,\r\n    userName: string\r\n}\r\n\r\n"],"sourceRoot":""}