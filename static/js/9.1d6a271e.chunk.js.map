{"version":3,"sources":["components/MainWindow/News/News.module.scss","components/MainWindow/News/NewsItem/NewsItem.module.scss","components/MainWindow/News/NewsItem/NewsItem.tsx","components/MainWindow/News/News.tsx","utils/localStorage/useGetNewsListFromLocalStorage.ts"],"names":["module","exports","NewsItem","news","dispatch","useDispatch","useState","titleEditMode","setTitleEditMode","textEditMode","setTextEditMode","titleChangeHandler","textChangeHandler","className","style","newsBlock__item","newsBlock__itemBlock","image","src","alt","main","main__title","onDoubleClick","type","autoFocus","value","title","onChange","e","newsID","id","currentTarget","NewsActions","changeNewsTitle","main__text","text","changeNewsText","button__group","form__btn","onClick","newsId","deleteNews","News","EMPTY_STRING","setTitle","error","setError","activateAddMode","setActivateAddMode","newsArray","currentItemList","useSelector","getNewsSelector","useEffect","currentItemListAsString","localStorage","getItem","setHistoryFromSessionStorage","JSON","parse","setItem","stringify","useGetHistoryList","isFetching","getIsFetching","onChangeHandler","news__title","newsBlock","map","addNewsForm","ErrorBlock","placeholder","addNewsError","trim","addNews"],"mappings":"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","file":"static/js/9.1d6a271e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__2R0N-\",\"news__title\":\"News_news__title__1t8Ld\",\"newsBlock\":\"News_newsBlock__3bc9i\",\"addNewsForm\":\"News_addNewsForm__vWH9C\",\"ErrorBlock\":\"News_ErrorBlock__1kRAT\",\"addNewsError\":\"News_addNewsError__3SB2V\",\"button__group\":\"News_button__group__2yDzl\",\"form__btn\":\"News_form__btn__12mT4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newsBlock__item\":\"NewsItem_newsBlock__item__17MHj\",\"newsBlock__itemBlock\":\"NewsItem_newsBlock__itemBlock__hlrjo\",\"image\":\"NewsItem_image__3mlwW\",\"main\":\"NewsItem_main__1kYXU\",\"main__title\":\"NewsItem_main__title__3jCAQ\",\"main__text\":\"NewsItem_main__text__sb-QF\",\"button__group\":\"NewsItem_button__group__3Dp4I\",\"form__btn\":\"NewsItem_form__btn__1LONx\"};","import React, { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\n\nimport { NewsActions } from '../../../../redux/NewsReducer';\nimport { ReturnComponentType } from '../../../../types/ReturnComponentType';\n\nimport style from './NewsItem.module.scss';\nimport { PropsType } from './types';\n\nexport const NewsItem: React.FC<PropsType> = ({ news }): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const [titleEditMode, setTitleEditMode] = useState<boolean>(false);\n  const [textEditMode, setTextEditMode] = useState<boolean>(false);\n\n  const titleChangeHandler = (): void => {\n    setTitleEditMode(!titleEditMode);\n    setTextEditMode(false);\n  };\n\n  const textChangeHandler = (): void => {\n    setTextEditMode(!textEditMode);\n    setTitleEditMode(false);\n  };\n\n  const deleteNewsHandler = (newsId: string): void => {\n    dispatch(NewsActions.deleteNews(newsId));\n  };\n\n  const changeTitle = (newsID: string, title: string): void => {\n    dispatch(NewsActions.changeNewsTitle(newsID, title));\n  };\n\n  const changeText = (newsID: string, text: string): void => {\n    dispatch(NewsActions.changeNewsText(newsID, text));\n  };\n\n  return (\n    <div className={style.newsBlock__item}>\n      <div className={style.newsBlock__itemBlock}>\n        <img className={style.image} src={news.image} alt=\"news\" />\n      </div>\n      <div className={style.main}>\n        <div>\n          <div className={style.main__title} onDoubleClick={titleChangeHandler}>\n            {titleEditMode ? (\n              <input\n                type=\"text\"\n                autoFocus\n                value={news.title}\n                onChange={e => changeTitle(news.id, e.currentTarget.value)}\n              />\n            ) : (\n              <span>{news.title}</span>\n            )}\n          </div>\n\n          <div className={style.main__text} onDoubleClick={textChangeHandler}>\n            {textEditMode ? (\n              <textarea\n                autoFocus\n                value={news.text}\n                onChange={e => changeText(news.id, e.currentTarget.value)}\n              />\n            ) : (\n              <span>{news.text}</span>\n            )}\n          </div>\n        </div>\n\n        <div className={style.button__group}>\n          {titleEditMode ? (\n            <div className={style.form__btn} onClick={titleChangeHandler}>\n              <button type=\"button\">Save</button>\n            </div>\n          ) : (\n            <div className={style.form__btn} onClick={titleChangeHandler}>\n              <button type=\"button\">Edit title ✎</button>\n            </div>\n          )}\n          {textEditMode ? (\n            <div className={style.form__btn} onClick={textChangeHandler}>\n              <button type=\"button\">Save</button>\n            </div>\n          ) : (\n            <div className={style.form__btn} onClick={textChangeHandler}>\n              <button type=\"button\">Edit text ✎</button>\n            </div>\n          )}\n          <div className={style.form__btn} onClick={() => deleteNewsHandler(news.id)}>\n            <button type=\"button\">Delete news ⌦</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Preloader } from '../../../common';\nimport { EMPTY_STRING } from '../../../constants';\nimport { NewsActions } from '../../../redux/NewsReducer';\nimport { NewsType } from '../../../redux/NewsReducer/types';\nimport { getIsFetching } from '../../../selectors';\nimport { ReturnComponentType } from '../../../types/ReturnComponentType';\nimport { useGetHistoryList } from '../../../utils/localStorage/useGetNewsListFromLocalStorage';\n\nimport style from './News.module.scss';\nimport { NewsItem } from './NewsItem';\n\nconst News = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n\n  const [title, setTitle] = useState<string>(EMPTY_STRING);\n  const [error, setError] = useState<string>(EMPTY_STRING);\n  const [activateAddMode, setActivateAddMode] = useState<boolean>(false);\n\n  const newsArray: NewsType[] = useGetHistoryList();\n  const isFetching: boolean = useSelector(getIsFetching);\n\n  const activateAddModeHandler = (): void => {\n    setActivateAddMode(!activateAddMode);\n  };\n\n  const onChangeHandler = (title: string): void => {\n    setError(EMPTY_STRING);\n    setTitle(title);\n  };\n  const addNews = (): void => {\n    if (title.trim()) {\n      dispatch(NewsActions.addNews(title));\n      setError(EMPTY_STRING);\n      setTitle(EMPTY_STRING);\n    } else {\n      const error = 'Field is required';\n      setError(error);\n    }\n  };\n\n  const cancelHandler = (): void => {\n    setActivateAddMode(!activateAddMode);\n    setError(EMPTY_STRING);\n  };\n\n  return (\n    <section className={style.news}>\n      {isFetching ? <Preloader /> : null}\n      <h3 className={style.news__title}>News</h3>\n      <div className={style.newsBlock}>\n        {newsArray.map(news => (\n          <NewsItem key={news.id} news={news} />\n        ))}\n      </div>\n      {activateAddMode ? (\n        <div className={style.addNewsForm}>\n          {error ? (\n            <div className={style.ErrorBlock}>\n              <textarea\n                onChange={e => onChangeHandler(e.currentTarget.value)}\n                value={title}\n                placeholder=\"write news title\"\n              />\n              <div className={style.addNewsError}>{error}</div>\n            </div>\n          ) : (\n            <textarea\n              onChange={e => onChangeHandler(e.currentTarget.value)}\n              value={title}\n              placeholder=\"write news title\"\n            />\n          )}\n          <div className={style.button__group}>\n            <div className={style.form__btn} onClick={addNews}>\n              <button type=\"button\">Save</button>\n            </div>\n            <div className={style.form__btn} onClick={cancelHandler}>\n              <button type=\"button\">Cancel</button>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className={style.form__btn} onClick={activateAddModeHandler}>\n          <button type=\"button\">Add new news</button>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default News;\n","import { useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { NewsActions } from '../../redux/NewsReducer';\nimport { NewsType } from '../../redux/NewsReducer/types';\nimport { getNewsSelector } from '../../selectors';\n\nexport const useGetHistoryList = (): NewsType[] => {\n  const dispatch = useDispatch();\n\n  const currentItemList = useSelector(getNewsSelector);\n\n  useEffect(() => {\n    const currentItemListAsString = localStorage.getItem('currentItemList');\n    currentItemListAsString &&\n      dispatch(\n        NewsActions.setHistoryFromSessionStorage(JSON.parse(currentItemListAsString)),\n      );\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('currentItemList', JSON.stringify(currentItemList));\n  }, [currentItemList]);\n  return currentItemList;\n};\n"],"sourceRoot":""}