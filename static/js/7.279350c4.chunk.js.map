{"version":3,"sources":["pages/Chat/Chat/Messages/Messages.module.css","pages/Chat/Chat/Messages/Message/Message.module.css","pages/Chat/Chat/AddMessageForm/AddMessageForm.module.css","pages/Chat/Chat/Chat.module.scss","pages/Chat/ChatPage.module.scss","pages/Chat/Chat/Messages/Message/Message.tsx","selectors/chatSelectors.ts","pages/Chat/Chat/Messages/Messages.tsx","pages/Chat/Chat/AddMessageForm/AddMessageForm.tsx","pages/Chat/Chat/Chat.tsx","pages/Chat/ChatPage.tsx"],"names":["module","exports","Message","React","memo","message","className","style","message__item","to","PATH","PROFILE","userId","message__img","src","photo","alt","title","userName","message__userName","message__text","getChatStatusSelector","state","chat","status","getChatMessagesSelector","messages","Messages","useState","isAutoScroll","setIsAutoScroll","useSelector","messagesAnchorRef","useRef","useEffect","current","scrollIntoView","behavior","chat__item","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","id","ref","AddMessageForm","dispatch","useDispatch","setMessage","textarea","placeholder","value","onChange","addMessageText","onKeyPress","key","sendMessage","form__btn","onClick","trim","disabled","Chat","startMessagesListening","stopMessagesListening","chatBlock","ChatPage","chatPageBlock","chatPage__title"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,WAAa,+B,oBCA/BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,kBAAoB,mCAAmC,aAAe,8BAA8B,cAAgB,iC,oBCAxND,EAAOC,QAAU,CAAC,UAAY,kCAAkC,SAAW,mC,oBCA3ED,EAAOC,QAAU,CAAC,UAAY,0B,oBCA9BD,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,gBAAkB,oC,sICKvEC,EAAiCC,IAAMC,MAAK,YAAgB,IAAdC,EAAa,EAAbA,QAEnD,OACI,qCACI,sBAAKC,UAAWC,IAAMF,QAAtB,UACI,sBAAKC,UAAWC,IAAMC,cAAtB,UACI,cAAC,IAAD,CAASC,GAAE,UAAKC,IAAKC,QAAV,YAAqBN,EAAQO,QAAxC,SACI,qBACIN,UAAWC,IAAMM,aACjBC,IAAKT,EAAQU,MACbC,IAAI,SACJC,MAAK,iBAAYZ,EAAQa,cAGjC,qBAAKZ,UAAWC,IAAMY,kBAAtB,SACKd,EAAQa,WAEb,0BAEJ,qBAAKZ,UAAWC,IAAMa,cAAtB,SACKf,EAAQA,aAGjB,6BC3BHgB,EAAwB,SAACC,GAClC,OAAOA,EAAMC,KAAKC,QAGTC,EAA0B,SAACH,GACpC,OAAOA,EAAMC,KAAKG,UCETC,EAAqB,WAAO,IAAD,EAEIC,oBAAkB,GAFtB,mBAE7BC,EAF6B,KAEfC,EAFe,KAI9BJ,EAAWK,YAA6CN,GACxDO,EAAoBC,iBAAuB,MAoBjD,OANAC,qBAAU,WACa,IAAD,EAAdL,IACA,UAAAG,EAAkBG,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACX,IAGA,sBAAKpB,UAAWC,IAAM+B,WAAYC,SAnBhB,SAACC,GAEnB,IAAMC,EAAUD,EAAEE,cAEdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,WAAaL,EAAQM,aAAe,KAC3ElB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAYpC,UAEQJ,EAASsB,KAAI,SAAC3C,GACV,OACI,cAACH,EAAD,CAEIG,QAASA,GADJA,EAAQ4C,OAM7B,qBAAKC,IAAKlB,Q,0BCrCTmB,EAA2B,WAEpC,IAAMC,EAAWC,cAFyB,EAIZzB,mBAAiB,IAJL,mBAInCvB,EAJmC,KAI1BiD,EAJ0B,KAMpC9B,EAASO,YAA2CV,GAmB1D,OACI,gCACI,0BACIf,UAAWC,IAAMgD,SACjBC,YAAa,4BACbC,MAAOpD,EACPqD,SAAU,SAAClB,GAAD,OAVC,SAACA,GACpBc,EAAWd,GAScmB,CAAenB,EAAEE,cAAce,QAChDG,WAlBc,SAACpB,GACT,UAAVA,EAAEqB,MACFT,EAASU,YAAYzD,IACrBiD,EAAW,QAiBX,qBAAKhD,UAAWC,IAAMwD,UAAWC,QA1Bd,WAClB3D,EAAQ4D,SACbb,EAASU,YAAYzD,IACrBiD,EAAW,MAuBP,SACI,wBAAQY,SAAqB,UAAX1C,EAAlB,wB,kBCjCH2C,EAAiB,WAE1B,IAAMf,EAAWC,cAEX7B,EAASO,YAA2CV,GAS1D,OAPAa,qBAAU,WAEN,OADAkB,EAASgB,eACF,WACHhB,EAASiB,kBAEd,IAGC,qCAEmB,UAAX7C,GACG,gFAEP,sBAAKlB,UAAWC,IAAM+D,UAAtB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,W,kBCjBDC,UAXY,WACvB,OACI,0BAASjE,UAAWC,IAAMiE,cAA1B,UACI,qBAAKlE,UAAWC,IAAMkE,gBAAtB,yBAGA,cAAC,EAAD","file":"static/js/7.279350c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat__item\":\"Messages_chat__item__M8tP2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3y-12\",\"message__item\":\"Message_message__item__1P-zd\",\"message__userName\":\"Message_message__userName__liBCF\",\"message__img\":\"Message_message__img__2xFCT\",\"message__text\":\"Message_message__text__1r__e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__btn\":\"AddMessageForm_form__btn__3NQLC\",\"textarea\":\"AddMessageForm_textarea__2V23D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBlock\":\"Chat_chatBlock__2VIOb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatPageBlock\":\"ChatPage_chatPageBlock__GbHGB\",\"chatPage__title\":\"ChatPage_chatPage__title__25xdr\"};","import React from 'react';\r\nimport style from './Message.module.css'\r\nimport {ChatMessageType} from \"../../../../../redux/chatReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../../../utils/RouterPath/RouterPath\";\r\n\r\nexport const Message: React.FC<MessageType> = React.memo(({message}) => {\r\n\r\n        return (\r\n            <>\r\n                <div className={style.message}>\r\n                    <div className={style.message__item}>\r\n                        <NavLink to={`${PATH.PROFILE}/${message.userId}`}>\r\n                            <img\r\n                                className={style.message__img}\r\n                                src={message.photo}\r\n                                alt=\"avatar\"\r\n                                title={`avatar ${message.userName}`}\r\n                            />\r\n                        </NavLink>\r\n                        <div className={style.message__userName}>\r\n                            {message.userName}\r\n                        </div>\r\n                        <br/>\r\n                    </div>\r\n                    <div className={style.message__text}>\r\n                        {message.message}\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n            </>\r\n        )\r\n    }\r\n)\r\n\r\ntype MessageType = {\r\n    message: ChatMessageType\r\n}","import {AppStateType} from \"../redux/reduxStore\";\r\n\r\nexport const getChatStatusSelector = (state: AppStateType) => {\r\n    return state.chat.status\r\n}\r\n\r\nexport const getChatMessagesSelector = (state: AppStateType) => {\r\n    return state.chat.messages\r\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport style from './Messages.module.css';\r\nimport {useSelector} from \"react-redux\";\r\n\r\nimport {Message} from \"./Message/Message\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport {ChatMessageType} from \"../../../../redux/chatReducer\";\r\nimport {getChatMessagesSelector} from \"../../../../selectors/chatSelectors\";\r\n\r\nexport const Messages: React.FC = () => {\r\n\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(false)\r\n\r\n    const messages = useSelector<AppStateType, ChatMessageType[]>(getChatMessagesSelector)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n\r\n        const element = e.currentTarget\r\n\r\n        if (Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div className={style.chat__item} onScroll={scrollHandler}>\r\n            {\r\n                messages.map((message) => {\r\n                    return (\r\n                        <Message\r\n                            key={message.id}\r\n                            message={message}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            <div ref={messagesAnchorRef}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, KeyboardEvent} from 'react';\r\nimport style from './AddMessageForm.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {sendMessage} from \"../../../../redux/chatReducer\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport {ReadyStatusType} from \"../../../../Api/chatApi\";\r\nimport {getChatStatusSelector} from \"../../../../selectors/chatSelectors\";\r\n\r\nexport const AddMessageForm: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [message, setMessage] = useState<string>(\"\")\r\n\r\n    const status = useSelector<AppStateType, ReadyStatusType>(getChatStatusSelector)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message.trim()) return\r\n        dispatch(sendMessage(message))\r\n        setMessage(\"\")\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            dispatch(sendMessage(message))\r\n            setMessage(\"\")\r\n        }\r\n    }\r\n\r\n    const addMessageText = (e: string) => {\r\n        setMessage(e)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <textarea\r\n                className={style.textarea}\r\n                placeholder={\"write your message âœ‰\"}\r\n                value={message}\r\n                onChange={(e) => addMessageText(e.currentTarget.value)}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n            <div className={style.form__btn} onClick={sendMessageHandler}>\r\n                <button disabled={status !== 'ready'}>\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\nimport {startMessagesListening, stopMessagesListening} from \"../../../redux/chatReducer\";\r\nimport style from './Chat.module.scss'\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {ReadyStatusType} from \"../../../Api/chatApi\";\r\nimport {getChatStatusSelector} from \"../../../selectors/chatSelectors\";\r\n\r\nexport const Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector<AppStateType, ReadyStatusType>(getChatStatusSelector)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                status === 'error'\r\n                && <div>Some error occurred. Please refresh this page</div>\r\n            }\r\n            <div className={style.chatBlock}>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Chat} from \"./Chat/Chat\";\r\nimport style from './ChatPage.module.scss'\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <section className={style.chatPageBlock}>\r\n            <div className={style.chatPage__title}>\r\n                Common chat\r\n            </div>\r\n            <Chat/>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ChatPage\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string,\r\n    photo: string\r\n    userId: number,\r\n    userName: string\r\n}\r\n\r\n"],"sourceRoot":""}