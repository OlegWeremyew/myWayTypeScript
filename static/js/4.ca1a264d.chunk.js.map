{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.tsx","hoc/withAuthRedirect/withAuthRedirect.tsx","components/MainWindow/Profile/ProfileInfo/ProfileInfo.module.css","components/MainWindow/Profile/Profile.module.css","components/MainWindow/Profile/MyPosts/MyPosts.module.css","components/MainWindow/Profile/MyPosts/Post/Post.module.css","assets/images/avatar_for_profile.jpg","components/MainWindow/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileDataForm/ProfileDataForm.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileData/Contact/Contact.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileData/ProfileData.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileEdit.tsx","components/MainWindow/Profile/ProfileInfo/ProfileInfo.tsx","components/MainWindow/Profile/MyPosts/Post/Post.tsx","components/MainWindow/Profile/MyPosts/MyPosts.tsx","components/MainWindow/Profile/MyPosts/MyPostsContainer.tsx","components/MainWindow/Profile/Profile.tsx","components/MainWindow/Profile/ProfileContainer.tsx","hoc/withRouter/withRouter.tsx"],"names":["FormControl","meta","touched","error","children","hasError","styleError","styles","className","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","ProfileStatus","editMode","status","activateEditMode","setState","deactivateEditMode","updateUserStatus","onStatusChange","e","currentTarget","prevProps","prevState","this","onDoubleClick","onChange","autoFocus","onBlur","React","Component","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","onSubmit","type","Object","keys","contacts","map","key","Preloader","Contact","contactTitle","contactValue","style","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileEdit","setEditModeHandler","initialValues","ProfileInfo","savePhoto","saveProfile","useState","setEditMode","formData","a","avatarBlock","avatar","mainPhoto","alt","src","photos","large","avatarDefault","target","files","onMainPhotoSelected","Post","c","item","title","itemText","message","likesCount","id","MyPosts","memo","profilePage","onAddPost","post","posts","p","myPosts","ReduxAddNewPostForm","values","AddNewPost","Field","MyPostsContainer","ProfileActions","addPost","Profile","ProfileAPIContainer","userId","authorizedUserID","history","push","Error","getUserProfile","getUserStatus","refreshProfile","snapshot","ProfileContainer","compose","data","params","useParams","location","useLocation"],"mappings":"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","file":"static/js/4.ca1a264d.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {Validator} from \"redux-form/lib/Field\";\r\n\r\nconst FormControl: React.FC<FormControlPropsParamsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error\r\n    const styleError = hasError ? styles.error : \"\"\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + styleError}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<T extends string>(placeholder: string | null, name: T, validators: Validator | Validator[], component: componentType, props: { type: string }, text?: string) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n//types====\r\n\r\ntype FormControlPropsParamsType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport type  LoginFormValuesKeysType = Extract<keyof LoginFormValuesType, string>\r\n\r\ntype componentType = \"input\" | \"select\" | \"textarea\" | ComponentType<WrappedFieldProps> | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3bb8c\",\"error\":\"FormsControls_error__17NH9\",\"formSummaryError\":\"FormsControls_formSummaryError__1kRrY\"};","import React from 'react';\r\n\r\nexport const required = (value: string): ReturnValidatorType => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string): ReturnValidatorType => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n//types\r\nexport type ReturnValidatorType = string | undefined","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(WrappedComponent: React.ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={'/login'}/>\r\n        }\r\n        return <WrappedComponent {...restProps as T} />\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n//types============\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ground\":\"ProfileInfo_ground__tDaWn\",\"ava\":\"ProfileInfo_ava__9e5p9\",\"avatar\":\"ProfileInfo_avatar__WJ8zq\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3Y96K\",\"contacts\":\"ProfileInfo_contacts__O0vKF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3rowZ\",\"ava\":\"Profile_ava__3qkus\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1Dxws\",\"posts\":\"MyPosts_posts__1WTYZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3IYxb\",\"itemText\":\"Post_itemText__rOuHO\"};","export default __webpack_public_path__ + \"static/media/avatar_for_profile.e4c1e159.jpg\";","import React, {ChangeEvent} from 'react';\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state: stateType = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileStatusType, prevState: boolean) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                    status: this.props.status,\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                <div>\r\n                    <h3>Status:</h3> <span onDoubleClick={this.activateEditMode}>{this.props.status || \"------\"}</span>\r\n                </div>}\r\n                {this.state.editMode &&\r\n                <div>\r\n                    <h3>Status:</h3>\r\n                    <input\r\n                        onChange={this.onStatusChange}\r\n                        autoFocus\r\n                        value={this.state.status}\r\n                        onBlur={this.deactivateEditMode}\r\n                    />\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//types====\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\ntype stateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {ProfileType} from \"../../../../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../../../../../common/Preloader/Preloader\";\r\nimport {createField, Input, Textarea} from \"../../../../../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({\r\n                                                                                                                      profile,\r\n                                                                                                                      handleSubmit,\r\n                                                                                                                      error\r\n                                                                                                                  }) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n                {error && <div>{error}</div>}\r\n            </div>\r\n            <div>\r\n                <b>Full name</b>:\r\n                {createField(\"Full name\", \"fullname\", [], Input, {type: \"text\"}, \"\")}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:\r\n                {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"}, \"\")}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea, {type: \"textarea\"}, \"\")}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                {createField(\"About me\", \"aboutMe\", [], Textarea, {type: \"textarea\"}, \"\")}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {\r\n                Object\r\n                    .keys(profile.contacts)\r\n                    .map(key => {\r\n                        return (\r\n                            <div key={key}>\r\n                                <b>{key} :{createField(key, `contacts.${key}`, [], Input, {type: \"text\"}, \"\")}</b>\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n\r\n//types======\r\nexport type ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n}","import React, {FC} from \"react\";\r\nimport style from \"../../../ProfileInfo.module.css\";\r\n\r\nconst Contact: FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={style.contacts}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n\r\n//types\r\nexport type ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}","import {Preloader} from \"../../../../../../common/Preloader/Preloader\";\r\nimport {ContactsType, ProfileType} from \"../../../../../../redux/profileReducer\";\r\nimport React from \"react\";\r\nimport Contact from \"./Contact/Contact\";\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataPropsType) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {\r\n                    isOwner &&\r\n                    <div>\r\n                        <button onClick={goToEditMode}>Edit</button>\r\n                    </div>\r\n                }\r\n                <div>\r\n                    <b>Full name</b>: {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : 'no'}\r\n                </div>\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}</div>\r\n                <div>\r\n                    <b>About me</b>: {profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    <b>Contacts</b>: {\r\n                    Object\r\n                        .keys(profile.contacts)\r\n                        .map(key => {\r\n                                return (\r\n                                    <Contact\r\n                                        key={key}\r\n                                        contactTitle={key}\r\n                                        contactValue={profile.contacts[key as keyof ContactsType]}\r\n                                    />\r\n                                )\r\n                            }\r\n                        )\r\n                }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileData\r\n\r\n//types====\r\nexport type ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode?: () => void\r\n}","import React from 'react';\r\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\nimport {ProfileType} from \"../../../../../redux/profileReducer\";\r\n\r\nconst ProfileEdit = ({editMode, profile, onSubmit, isOwner, setEditModeHandler}: ProfileEditPropsType) => {\r\n    return (\r\n        <>\r\n            {\r\n                editMode\r\n                    ? (\r\n                        <ProfileDataForm\r\n                            initialValues={profile}\r\n                            profile={profile}\r\n                            onSubmit={onSubmit}\r\n                        />\r\n                    ) : (\r\n                        <ProfileData\r\n                            profile={profile}\r\n                            isOwner={isOwner}\r\n                            goToEditMode={setEditModeHandler}\r\n                        />\r\n                    )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileEdit\r\n\r\n//types\r\ntype ProfileEditPropsType = {\r\n    editMode: boolean\r\n    profile: ProfileType\r\n    onSubmit: any\r\n    isOwner: boolean\r\n    setEditModeHandler: () => void\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport style from \"./ProfileInfo.module.css\"\r\nimport avatarDefault from '../../../../assets/images/avatar_for_profile.jpg'\r\nimport {ProfileType} from \"../../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../../../common/Preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\r\nimport ProfileEdit from \"./ProfileEdit/ProfileEdit\";\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateUserStatus, savePhoto, isOwner, saveProfile}: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (formData: ProfileType): Promise<any> => {\r\n        await saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const setEditModeHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            <div className={style.avatarBlock}>\r\n                <div className={style.avatar}>\r\n                    <img\r\n                        className={style.mainPhoto}\r\n                        alt='main avatar'\r\n                        src={profile && (profile.photos.large !== null) ? profile.photos.large : avatarDefault}/>\r\n                    {\r\n                        isOwner && <input type={\"file\"} onChange={(e) => onMainPhotoSelected(e)}/>\r\n                    }\r\n                </div>\r\n                <ProfileEdit\r\n                    editMode={editMode}\r\n                    profile={profile}\r\n                    onSubmit={onSubmit}\r\n                    isOwner={isOwner}\r\n                    setEditModeHandler={setEditModeHandler}\r\n                />\r\n                <ProfileStatus\r\n                    status={status}\r\n                    updateUserStatus={updateUserStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport c from \"./Post.module.css\"\r\nimport {PostType} from \"../../../../../redux/profileReducer\";\r\n\r\nconst Post = (props: PostType) => {\r\n\r\n    return (\r\n        <div key={props.id} className={c.item}>\r\n            <img\r\n                src=\"https://slovami.net/wp-content/uploads/thumbs_dir/the-most-beautiful-guys-russia-4-1-nwkkkydf2f1mhw9a4ijzfs2ktasvevyjiyi4xibqis.jpg\"\r\n                alt=\"ava\" title=\"ava\"/>\r\n            <div className={c.itemText}>\r\n                {props.message}\r\n                <div>\r\n                    <span>like: {props.likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport c from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {UsersPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nexport const MyPosts = React.memo(({profilePage, onAddPost}: UsersPropsType) => {\r\n\r\n    const post = profilePage.posts\r\n        .map(p =>\r\n            <Post\r\n                key={p.id}\r\n                message={p.message}\r\n                likesCount={p.likesCount}\r\n                id={p.id}\r\n            />)\r\n\r\n    const addPost = (values: AddNewPostFormType) => {\r\n        onAddPost(values.AddNewPost)\r\n    }\r\n\r\n    return (\r\n        <div className={c.myPosts}>\r\n            <h3>My posts</h3>\r\n            <ReduxAddNewPostForm onSubmit={addPost}/>\r\n            <div className={c.posts}>\r\n                {post}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"AddNewPost\"}\r\n                    placeholder={\"Write your message\"}\r\n                    validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxAddNewPostForm = reduxForm<AddNewPostFormType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\n//types\r\n\r\ntype AddNewPostFormType = {\r\n    AddNewPost: string\r\n}","import React from 'react';\r\nimport {initialStateType, ProfileActions} from \"../../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToProps, {}, AppStateType>(mapStateToProps, {\r\n    onAddPost: ProfileActions.addPost\r\n})(MyPosts)\r\n\r\n//types=============\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: initialStateType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    onAddPost: (newPostText: string) => void\r\n}","import React from 'react';\r\nimport c from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={c.profile}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n\r\n//Types\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}","import React, {ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserStatus,\r\n    getUserProfile,\r\n    ProfileType,\r\n    updateUserStatus, savePhoto, saveProfile\r\n} from \"../../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {InjectedProps, withRouter2} from \"../../../hoc/withRouter/withRouter\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect/withAuthRedirect\";\r\n\r\nclass ProfileAPIContainer extends React.Component<ProfilePropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: string | null = this.props.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserID;\r\n            if (!userId) {\r\n                //@ts-ignore\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            throw new Error(\"ID should be exists\")\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getUserStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.userId !== prevProps.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateUserStatus={this.props.updateUserStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isAuth: state.auth.isAuth,\r\n        status: state.profilePage.status,\r\n        authorizedUserID: state.auth.data.userId,\r\n    }\r\n}\r\n\r\nconst ProfileContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        savePhoto,\r\n        saveProfile,\r\n    }),\r\n    withRouter2,\r\n    withAuthRedirect\r\n)(ProfileAPIContainer)\r\n\r\nexport default ProfileContainer\r\n\r\n//types===\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserID: string | null\r\n}\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userId: string | null) => void\r\n    getUserStatus: (userId: string | null) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToProps & InjectedProps\r\n\r\n","import React from \"react\";\r\nimport {useLocation, useParams} from \"react-router-dom\";\r\n\r\nexport const withRouter = (WrappedComponent: typeof React.Component) => (props: WrappedComponentWithRouterPropsType) => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const location = useLocation()\r\n\r\n    return (\r\n\r\n        <WrappedComponent\r\n            {...props}\r\n            userId={params.userId}\r\n            location={location}\r\n        />\r\n    )\r\n}\r\n\r\nexport const withRouter2 = <T  extends object> (WrappedComponent: React.ComponentType<T>) => (props: T) => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const location = useLocation()\r\n    return (\r\n\r\n        <WrappedComponent\r\n            {...props as T}\r\n            userId={params.userId}\r\n            location={location}\r\n        />\r\n    )\r\n}\r\n\r\n//types===========\r\nexport type locationType = {\r\n    hash: string\r\n    key: string\r\n    pathname: string\r\n    search: string\r\n    state: object | null\r\n}\r\n\r\nexport type WrappedComponentWithRouterPropsType = {\r\n    userId: string\r\n    location: locationType\r\n}\r\n\r\nexport type InjectedProps = {\r\n    userId : string\r\n}\r\n\r\n"],"sourceRoot":""}