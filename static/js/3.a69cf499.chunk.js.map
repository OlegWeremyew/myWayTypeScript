{"version":3,"sources":["hoc/withAuthRedirect/withAuthRedirect.tsx","components/MainWindow/Profile/Profile.module.css","components/MainWindow/Profile/ProfileInfo/ProfileInfo.module.css","components/MainWindow/Profile/MyPosts/MyPosts.module.css","components/MainWindow/Profile/MyPosts/Post/Post.module.css","assets/images/avatar_for_profile.jpg","components/MainWindow/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/MainWindow/Profile/ProfileInfo/ProfileInfo.tsx","components/MainWindow/Profile/MyPosts/Post/Post.tsx","components/MainWindow/Profile/MyPosts/MyPosts.tsx","components/MainWindow/Profile/MyPosts/MyPostsContainer.tsx","components/MainWindow/Profile/Profile.tsx","components/MainWindow/Profile/ProfileContainer.tsx","hoc/withRouter/withRouter.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","ProfileStatus","editMode","status","activateEditMode","setState","deactivateEditMode","updateUserStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","this","onDoubleClick","onChange","autoFocus","onBlur","React","Component","ProfileInfo","profile","savePhoto","isOwner","className","c","avatarBlock","avatar","mainPhoto","alt","src","photos","large","avatarDefault","type","target","files","length","onMainPhotoSelected","Post","item","title","itemText","message","likesCount","id","maxLength","maxLengthCreator","MyPosts","memo","post","profilePage","posts","map","p","myPosts","ReduxAddNewPostForm","onSubmit","values","onAddPost","AddNewPost","reduxForm","form","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPostsContainer","dispatch","newPostText","addPost","Profile","ProfileAPIContainer","userId","authorizedUserID","history","push","getUserProfile","getUserStatus","refreshProfile","snapshot","ProfileContainer","compose","data","params","useParams","location","useLocation"],"mappings":"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","file":"static/js/3.a69cf499.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(WrappedComponent: React.ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={'/login'}/>\r\n        }\r\n        return <WrappedComponent {...restProps as T} />\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2hEbm\",\"ava\":\"Profile_ava__1yQJQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ground\":\"ProfileInfo_ground__28MUJ\",\"ava\":\"ProfileInfo_ava__1Sv2V\",\"avatar\":\"ProfileInfo_avatar__23WhG\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2Pzut\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2ZG6g\",\"posts\":\"MyPosts_posts__2UAWW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__qV_PV\",\"itemText\":\"Post_itemText__1Jpz_\"};","export default __webpack_public_path__ + \"static/media/avatar_for_profile.e4c1e159.jpg\";","import React, {ChangeEvent} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\ntype stateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state: stateType = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileStatusType, prevState: boolean) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                    status: this.props.status,\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                <div>\r\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"------\"}</span>\r\n                </div>}\r\n                {this.state.editMode &&\r\n                <div>\r\n                    <input\r\n                        onChange={this.onStatusChange}\r\n                        autoFocus\r\n                        value={this.state.status}\r\n                        onBlur={this.deactivateEditMode}\r\n                    />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n","import React from 'react';\r\nimport c from \"./ProfileInfo.module.css\"\r\nimport avatarDefault from '../../../../assets/images/avatar_for_profile.jpg'\r\nimport {ProfileType} from \"../../../../redux/profileReducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateUserStatus, savePhoto, isOwner}: ProfileInfoPropsType) => {\r\n\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={c.profile}>\r\n            <div className={c.avatarBlock}>\r\n                <div className={c.avatar}>\r\n                    <img\r\n                        className={c.mainPhoto}\r\n                        alt='ava'\r\n                        src={profile && profile.photos.large !== null ? profile.photos.large : avatarDefault}/>\r\n                    {isOwner && <input type={\"file\"} onChange={(e) => onMainPhotoSelected(e)}/>}\r\n                </div>\r\n                <ProfileStatus\r\n                    status={status}\r\n                    updateUserStatus={updateUserStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport c from \"./Post.module.css\"\r\nimport {PostType} from \"../../../../../redux/profileReducer\";\r\n\r\nconst Post = (props: PostType) => {\r\n\r\n    return (\r\n        <div key={props.id} className={c.item}>\r\n            <img\r\n                src=\"https://slovami.net/wp-content/uploads/thumbs_dir/the-most-beautiful-guys-russia-4-1-nwkkkydf2f1mhw9a4ijzfs2ktasvevyjiyi4xibqis.jpg\"\r\n                alt=\"ava\" title=\"ava\"/>\r\n            <div className={c.itemText}>\r\n                {props.message}\r\n                <div>\r\n                    <span>like: {props.likesCount}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport c from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\nimport {UsersPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\n\r\ntype AddNewPostFormType = {\r\n    AddNewPost: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nexport const MyPosts = React.memo((props: UsersPropsType) => {\r\n\r\n    let post = props.profilePage.posts.map(p => <Post key={p.id}\r\n                                                      message={p.message}\r\n                                                      likesCount={p.likesCount}\r\n                                                      id={p.id}/>)\r\n\r\n    let addPost = (values: AddNewPostFormType) => {\r\n        props.onAddPost(values.AddNewPost)\r\n    }\r\n\r\n    return (\r\n        <div className={c.myPosts}>\r\n            <h3>My posts</h3>\r\n            <ReduxAddNewPostForm onSubmit={addPost}/>\r\n            <div className={c.posts}>\r\n                {post}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"AddNewPost\"}\r\n                    placeholder={\"Write your message\"}\r\n                    validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxAddNewPostForm = reduxForm<AddNewPostFormType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n","import React from 'react';\r\nimport {addPost, initialStateType} from \"../../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: initialStateType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    onAddPost: (newPostText: string) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        onAddPost: (newPostText: string) => {\r\n            dispatch(addPost(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nexport let MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n","import React from 'react';\r\nimport c from \"./Profile.module.css\"\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={c.profile}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserStatus,\r\n    getUserProfile,\r\n    ProfileType,\r\n    updateUserStatus, savePhoto\r\n} from \"../../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {InjectedProps, withRouter2} from \"../../../hoc/withRouter/withRouter\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect/withAuthRedirect\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserID: string\r\n}\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToProps & InjectedProps\r\n\r\nclass ProfileAPIContainer extends React.Component<UsersPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: string = this.props.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserID;\r\n            if (!userId) {\r\n                //@ts-ignore\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<UsersPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.userId !== prevProps.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                isOwner={!this.props.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateUserStatus={this.props.updateUserStatus}\r\n                savePhoto={this.props.savePhoto}\r\n\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        isAuth: state.auth.isAuth,\r\n        status: state.profilePage.status,\r\n        authorizedUserID: state.auth.data.userId,\r\n    }\r\n}\r\n\r\nconst ProfileContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        savePhoto,\r\n    }),\r\n    withRouter2,\r\n    withAuthRedirect\r\n)(ProfileAPIContainer);\r\n\r\nexport default ProfileContainer\r\n","import React from \"react\";\r\nimport {useLocation, useParams} from \"react-router-dom\";\r\n\r\nexport type locationType = {\r\n    hash: string\r\n    key: string\r\n    pathname: string\r\n    search: string\r\n    state: object | null\r\n}\r\n\r\nexport type WrappedComponentWithRouterPropsType = {\r\n    userId: string\r\n    location: locationType\r\n}\r\n\r\nexport const withRouter = (WrappedComponent: typeof React.Component) => (props: object) => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const location = useLocation()\r\n\r\n    return (\r\n\r\n        <WrappedComponent\r\n            {...props}\r\n            userId={params.userId}\r\n            location={location}\r\n        />\r\n    );\r\n}\r\n\r\nexport type InjectedProps = {\r\n    userId : string\r\n}\r\n\r\n\r\nexport const withRouter2 = <T  extends object> (WrappedComponent: React.ComponentType<T>) => (props: T) => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const location = useLocation()\r\n    return (\r\n\r\n        <WrappedComponent\r\n            {...props as T}\r\n            userId={params.userId}\r\n            location={location}\r\n\r\n        />\r\n    );\r\n}\r\n\r\n"],"sourceRoot":""}