{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.tsx","hoc/withAuthRedirect/withAuthRedirect.tsx","components/MainWindow/Dialogs/Dialogs.module.css","components/MainWindow/Dialogs/DialogItem/DialogsItem.module.css","components/MainWindow/Dialogs/AddMessageForm/AddMessageForm.module.css","components/MainWindow/Dialogs/Dialog/Dialog.module.css","components/MainWindow/Dialogs/DialogItem/DialogsItem.tsx","components/MainWindow/Dialogs/AddMessageForm/AddMessageForm.tsx","components/MainWindow/Dialogs/Dialog/Dialog.tsx","components/MainWindow/Dialogs/DialogsContainer.tsx","components/MainWindow/Dialogs/Dialogs.tsx"],"names":["FormControl","meta","touched","error","children","hasError","styleError","styles","className","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","PATH","LOGIN","DialogsItem","id","img","path","DIALOGS","c","dialog","src","alt","ReduxAddMessageForm","reduxForm","form","onSubmit","handleSubmit","style","addMessage","Field","form__btn","Dialog","message","message__item","DialogsContainer","compose","messagesPage","MessageActions","dialogsItem","users","map","user","messages","dialogs","dialogs__dialog","dialogItem","values","newMessageText"],"mappings":"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","file":"static/js/5.48d9a670.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport styles from './FormsControls.module.css'\r\n\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {Validator} from \"redux-form/lib/Field\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\n\r\nconst FormControl: React.FC<FormControlPropsParamsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error\r\n    const styleError = hasError ? styles.error : \"\"\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + styleError}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<T extends string>(placeholder: Nullable<string>, name: T, validators: Validator | Validator[], component: componentType, props: { type: string }, text?: string) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n//types====\r\n\r\ntype FormControlPropsParamsType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport type  LoginFormValuesKeysType = Extract<keyof LoginFormValuesType, string>\r\n\r\ntype componentType = \"input\" | \"select\" | \"textarea\" | ComponentType<WrappedFieldProps> | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2wdsi\",\"error\":\"FormsControls_error__2ik_3\",\"formSummaryError\":\"FormsControls_formSummaryError__3OqQc\"};","import React from 'react';\r\n\r\nexport const required = (value: string): ReturnValidatorType => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string): ReturnValidatorType => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n//types\r\nexport type ReturnValidatorType = string | undefined","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {PATH} from \"../../common/RouterPath/RouterPath\";\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(WrappedComponent: React.ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={PATH.LOGIN}/>\r\n        }\r\n        return <WrappedComponent {...restProps as T} />\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n//types============\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__20A_6\",\"dialogs__dialog\":\"Dialogs_dialogs__dialog__38nt5\",\"dialogItem\":\"Dialogs_dialogItem__1wspN\",\"messages\":\"Dialogs_messages__1PjPt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__1le_4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addMessage\":\"AddMessageForm_addMessage__1Vf3v\",\"form__btn\":\"AddMessageForm_form__btn__2Q18i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Dialog_message__1t1cf\",\"message__item\":\"Dialog_message__item__1abb2\"};","import React from 'react';\r\nimport c from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../../../redux/messagesReducer\";\r\nimport {PATH} from \"../../../../common/RouterPath/RouterPath\";\r\n\r\nconst DialogsItem = ({id, img, name}: UserType) => {\r\n\r\n    const path = `${PATH.DIALOGS}${id}`\r\n\r\n    return (\r\n        <div className={c.dialog}>\r\n            <div>\r\n                <img src={img} alt=\"dialogs item\"/>\r\n            </div>\r\n            <div>\r\n                <NavLink to={path}>{name}</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItem","import React from \"react\";\r\nimport style from './AddMessageForm.module.css'\r\n\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {FormMessagesType} from \"../Dialogs\";\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormMessagesType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={style.addMessage}>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"newMessageText\"}\r\n                    placeholder={\"Write your message\"}\r\n                    validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div className={style.form__btn}>\r\n                <button>\r\n                    Add message\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ReduxAddMessageForm = reduxForm<FormMessagesType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React from 'react';\r\nimport style from \"./Dialog.module.css\"\r\nimport {MessageType} from \"../../../../redux/messagesReducer\";\r\n\r\nconst Dialog = (props: MessageType) => {\r\n\r\n    return (\r\n        <div  className={style.message}>\r\n            <div className={style.message__item}>{props.message}</div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React, {ComponentType} from 'react';\r\nimport {initialStateType, MessageActions} from \"../../../redux/messagesReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect/withAuthRedirect\";\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n        addMessage: MessageActions.addMessage\r\n    }), withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer\r\n\r\n//types===================\r\ntype MapStateToPropsType = {\r\n    messagesPage: initialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","import React from 'react';\r\nimport style from \"./Dialogs.module.css\"\r\n\r\nimport DialogsItem from \"./DialogItem/DialogsItem\";\r\nimport {UsersPropsType} from \"./DialogsContainer\";\r\nimport {ReduxAddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\n\r\nexport const Dialogs = ({messagesPage, addMessage}: UsersPropsType) => {\r\n\r\n    const dialogsItem = messagesPage.users\r\n        .map(user => {\r\n            return (\r\n                <DialogsItem\r\n                    key={user.id}\r\n                    name={user.name}\r\n                    id={user.id}\r\n                    img={user.img}\r\n                />\r\n            )\r\n        })\r\n\r\n    const message = messagesPage.messages\r\n        .map(message => {\r\n            return (\r\n                <Dialog\r\n                    key={message.id}\r\n                    message={message.message}\r\n                    id={message.id}\r\n                />\r\n            )\r\n        })\r\n\r\n    const addNewMessage = (values: FormMessagesType) => {\r\n        addMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogs__dialog}>\r\n                <div className={style.dialogItem}>\r\n                    {dialogsItem}\r\n                </div>\r\n                <div className={style.messages}>\r\n                    {message}\r\n                </div>\r\n            </div>\r\n            <ReduxAddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type FormMessagesType = {\r\n    newMessageText: string\r\n}"],"sourceRoot":""}