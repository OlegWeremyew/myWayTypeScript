{"version":3,"sources":["pages/Chat/Chat/Messages/Messages.module.css","pages/Chat/Chat/Messages/Message/Message.module.css","pages/Chat/Chat/AddMessageForm/AddMessageForm.module.css","pages/Chat/Chat/Chat.module.css","pages/Chat/ChatPage.module.css","pages/Chat/Chat/Messages/Message/Message.tsx","pages/Chat/Chat/Messages/Messages.tsx","pages/Chat/Chat/AddMessageForm/AddMessageForm.tsx","pages/Chat/Chat/Chat.tsx","pages/Chat/ChatPage.tsx"],"names":["module","exports","Message","React","memo","message","className","style","message__item","message__img","src","photo","alt","title","userName","message__userName","message__text","Messages","messages","useSelector","state","chat","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","chat__item","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","id","ref","AddMessageForm","dispatch","useDispatch","setMessage","status","textarea","placeholder","value","onChange","addMessageText","form__btn","onClick","trim","sendMessage","disabled","Chat","startMessagesListening","stopMessagesListening","chatBlock","ChatPage","chatPageBlock","chatPage__title"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,WAAa,+B,oBCA/BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,kBAAoB,mCAAmC,aAAe,8BAA8B,cAAgB,iC,oBCAxND,EAAOC,QAAU,CAAC,UAAY,kCAAkC,SAAW,mC,oBCA3ED,EAAOC,QAAU,CAAC,UAAY,0B,oBCA9BD,EAAOC,QAAU,CAAC,cAAgB,gCAAgC,gBAAkB,oC,+GCGvEC,EAAiCC,IAAMC,MAAK,YAAgB,IAAdC,EAAa,EAAbA,QACnD,OACI,qCACI,sBAAKC,UAAWC,IAAMF,QAAtB,UACI,sBAAKC,UAAWC,IAAMC,cAAtB,UACI,qBAAKF,UAAWC,IAAME,aAAcC,IAAKL,EAAQM,MAAOC,IAAI,SAASC,MAAK,iBAAYR,EAAQS,YAC9F,qBAAMR,UAAWC,IAAMQ,kBAAvB,SACKV,EAAQS,WAEb,0BAEJ,qBAAMR,UAAWC,IAAMS,cAAvB,SACKX,EAAQA,aAGjB,6B,QCXHY,EAAqB,WAE9B,IAAMC,EAAWC,aAA6C,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,YAC5EI,EAAoBC,iBAAuB,MAHb,EAIIC,oBAAkB,GAJtB,mBAI7BC,EAJ6B,KAIfC,EAJe,KAwBpC,OANAC,qBAAU,WACa,IAAD,EAAdF,IACA,UAAAH,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACZ,IAGA,sBAAKZ,UAAWC,IAAMwB,WAAYC,SAnBhB,SAACC,GAEnB,IAAMC,EAAUD,EAAEE,cAEdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,WAAaL,EAAQM,aAAe,KAC3Ef,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAYpC,UAEQR,EAASuB,KAAI,SAACpC,GACV,OACI,cAACH,EAAD,CAEIG,QAASA,GADJA,EAAQqC,OAM7B,qBAAKC,IAAKrB,Q,0BCpCTsB,EAA2B,WAEpC,IAAMC,EAAWC,cAFyB,EAIZtB,mBAAiB,IAJL,mBAInCnB,EAJmC,KAI1B0C,EAJ0B,KAMpCC,EAAS7B,aAA2C,SAAAC,GAAK,OAAIA,EAAMC,KAAK2B,UAY9E,OACI,gCACI,0BACI1C,UAAWC,IAAM0C,SACjBC,YAAa,qBACbC,MAAO9C,EACP+C,SAAU,SAACnB,GAAD,OAVC,SAACA,GACpBc,EAAWd,GAScoB,CAAepB,EAAEE,cAAcgB,UAEpD,qBAAK7C,UAAWC,IAAM+C,UAAtB,SACI,wBACIC,QApBW,WAClBlD,EAAQmD,SACbX,EAASY,YAAYpD,IACrB0C,EAAW,MAkBCW,SAAqB,UAAXV,EAFd,wB,kBCzBHW,EAAiB,WAE1B,IAAMd,EAAWC,cAEXE,EAAS7B,aAA2C,SAAAC,GAAK,OAAIA,EAAMC,KAAK2B,UAS9E,OAPArB,qBAAU,WAEN,OADAkB,EAASe,eACF,WACHf,EAASgB,kBAEd,IAGC,qCAEmB,UAAXb,GACG,gFAEP,sBAAK1C,UAAWC,IAAMuD,UAAtB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,W,kBClBDC,UATY,WACvB,OACI,sBAAKzD,UAAWC,IAAMyD,cAAtB,UACI,qBAAM1D,UAAWC,IAAM0D,gBAAvB,yBACA,cAAC,EAAD","file":"static/js/7.592ac848.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat__item\":\"Messages_chat__item__M8tP2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__3y-12\",\"message__item\":\"Message_message__item__1P-zd\",\"message__userName\":\"Message_message__userName__liBCF\",\"message__img\":\"Message_message__img__2xFCT\",\"message__text\":\"Message_message__text__1r__e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__btn\":\"AddMessageForm_form__btn__3NQLC\",\"textarea\":\"AddMessageForm_textarea__2V23D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBlock\":\"Chat_chatBlock__3zY-t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatPageBlock\":\"ChatPage_chatPageBlock__1x1-F\",\"chatPage__title\":\"ChatPage_chatPage__title__3Es5P\"};","import React from 'react';\r\nimport style from './Message.module.css'\r\nimport {ChatMessageType} from \"../../../../../redux/chatReducer\";\r\n\r\nexport const Message: React.FC<MessageType> = React.memo(({message}) => {\r\n        return (\r\n            <>\r\n                <div className={style.message}>\r\n                    <div className={style.message__item}>\r\n                        <img className={style.message__img} src={message.photo} alt=\"avatar\" title={`avatar ${message.userName}`}/>\r\n                        <div  className={style.message__userName}>\r\n                            {message.userName}\r\n                        </div>\r\n                        <br/>\r\n                    </div>\r\n                    <div  className={style.message__text}>\r\n                        {message.message}\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n            </>\r\n        )\r\n    }\r\n)\r\n\r\ntype MessageType = {\r\n    message: ChatMessageType\r\n}","import React, {useEffect, useRef, useState} from 'react';\r\nimport style from './Messages.module.css'\r\n\r\nimport {Message} from \"./Message/Message\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport {ChatMessageType} from \"../../../../redux/chatReducer\";\r\n\r\nexport const Messages: React.FC = () => {\r\n\r\n    const messages = useSelector<AppStateType, ChatMessageType[]>(state => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState<boolean>(false)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n\r\n        const element = e.currentTarget\r\n\r\n        if (Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div className={style.chat__item} onScroll={scrollHandler}>\r\n            {\r\n                messages.map((message) => {\r\n                    return (\r\n                        <Message\r\n                            key={message.id}\r\n                            message={message}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            <div ref={messagesAnchorRef}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport style from './AddMessageForm.module.css'\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage} from \"../../../../redux/chatReducer\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport {ReadyStatusType} from \"../../../../Api/chatApi\";\r\n\r\nexport const AddMessageForm: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [message, setMessage] = useState<string>(\"\")\r\n\r\n    const status = useSelector<AppStateType, ReadyStatusType>(state => state.chat.status)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message.trim()) return\r\n        dispatch(sendMessage(message))\r\n        setMessage(\"\")\r\n    }\r\n\r\n    const addMessageText = (e: string) => {\r\n        setMessage(e)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <textarea\r\n                className={style.textarea}\r\n                placeholder={\"write your message\"}\r\n                value={message}\r\n                onChange={(e) => addMessageText(e.currentTarget.value)}\r\n            />\r\n            <div className={style.form__btn}>\r\n                <button\r\n                    onClick={sendMessageHandler}\r\n                    disabled={status !== 'ready'}\r\n                >\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {Messages} from \"./Messages/Messages\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\nimport {startMessagesListening, stopMessagesListening} from \"../../../redux/chatReducer\";\r\nimport style from './Chat.module.css'\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {ReadyStatusType} from \"../../../Api/chatApi\";\r\n\r\nexport const Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector<AppStateType, ReadyStatusType>(state => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                status === 'error'\r\n                && <div>Some error occurred. Please refresh this page</div>\r\n            }\r\n            <div className={style.chatBlock}>\r\n                <Messages/>\r\n                <AddMessageForm/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Chat} from \"./Chat/Chat\";\r\nimport style from './ChatPage.module.css'\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <div className={style.chatPageBlock}>\r\n            <div  className={style.chatPage__title}>Common chat</div>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string,\r\n    photo: string\r\n    userId: number,\r\n    userName: string\r\n}\r\n\r\n"],"sourceRoot":""}