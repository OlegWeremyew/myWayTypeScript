{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.tsx","components/Login/Login.module.scss","hoc/withAuthRedirect/withAuthRedirect.tsx","components/MainWindow/Profile/ProfileInfo/ProfileInfo.module.css","components/MainWindow/Profile/Profile.module.css","components/MainWindow/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileDataForm/ProfileDataForm.module.css","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileData/ProfileData.module.css","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileData/Contact/Contact.module.css","components/MainWindow/Profile/MyPosts/MyPosts.module.css","components/MainWindow/Profile/MyPosts/Post/Post.module.css","assets/images/avatar_for_profile.jpg","components/MainWindow/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileDataForm/ProfileDataForm.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileData/Contact/Contact.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileData/ProfileData.tsx","components/MainWindow/Profile/ProfileInfo/ProfileEdit/ProfileEdit.tsx","components/MainWindow/Profile/ProfileInfo/ProfileInfo.tsx","components/MainWindow/Profile/MyPosts/Post/Post.tsx","components/MainWindow/Profile/MyPosts/MyPosts.tsx","components/MainWindow/Profile/MyPosts/MyPostsContainer.tsx","components/MainWindow/Profile/Profile.tsx","components/MainWindow/Profile/ProfileContainer.tsx","hoc/withRouter/withRouter.tsx"],"names":["FormControl","meta","touched","error","children","hasError","styleError","styles","className","formControl","Textarea","props","input","restProps","textarea","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","to","PATH","LOGIN","ProfileStatus","editMode","status","isOwner","activateEditMode","setState","deactivateEditMode","updateUserStatus","onStatusChange","e","currentTarget","prevProps","prevState","this","style","main","statusText","status__text","onDoubleClick","status__pencil","activeInput","onChange","autoFocus","onBlur","React","Component","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","formContainer","onSubmit","contacts__Title","form_edit","formBlock","type","formBlock__check","contactsBlock","Object","keys","contacts","map","key","contact__item","saveEdit__btn","Preloader","Contact","contactTitle","contactValue","href","address","ProfileData","goToEditMode","formBlock__title","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts__container","contacts__text","contactsBlock__item","icon","activateEdit__btn","onClick","ProfileEdit","setEditModeHandler","disableViewMode","view__btn","initialValues","ProfileInfo","savePhoto","saveProfile","useState","setEditMode","viewMode","setViewMode","formData","a","avatarBlock","avatar","mainPhoto","alt","src","photos","large","avatarDefault","profile__inner","addedPhoto__btn","avatarEdit","target","files","onMainPhotoSelected","id","accept","htmlFor","Post","dispatch","useDispatch","fingerUp","setFingerUp","heart","active","notActive","item","postAvatar","title","itemText","message","activeBlock","likeCounter","likesCount","reaction","ProfileActions","deletePost","delete__btn","MyPosts","memo","profilePage","onAddPost","post","posts","myPosts","post__title","ReduxAddNewPostForm","values","AddNewPost","reset","Field","s","form__btn","MyPostsContainer","getProfilePageSelector","addPost","Profile","ProfileAPIContainer","userId","authorizedUserID","history","push","Error","getUserProfile","getUserStatus","refreshProfile","snapshot","ProfileContainer","compose","getProfilePageProfileSelector","getAuthIsAuthSelector","getProfilePageStatusSelector","getAuthAuthorizedUserIDSelector","params","useParams","location","useLocation"],"mappings":"qRAOMA,EAAoD,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAE1EC,EAAWH,GAAWC,EACtBG,EAAaD,EAAWE,IAAOJ,MAAQ,GAE7C,OACI,sBAAKK,UAAWD,IAAOE,YAAc,IAAMH,EAA3C,UACI,8BACKF,IAEL,8BAEQC,GACG,+BAAOF,UAOjBO,EAAwC,SAACC,GAAW,IACtDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD8C,YACxBU,EADwB,mBAE5D,OACI,cAACX,EAAD,2BAAiBW,GAAjB,aACI,kDAAUH,UAAWD,IAAOO,UAAcF,GAAWC,QAKpDE,EAAqC,SAACJ,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD2C,YACrBU,EADqB,mBAEzD,OACI,cAACX,EAAD,2BAAiBW,GAAjB,aACI,+CAAQH,UAAWD,IAAOK,OAAWA,GAAWC,QAKrD,SAASG,EAA8BC,EAA+BC,EAASC,EAAqCC,EAA0BT,EAAyBU,GAC1K,OACI,gCACI,cAAC,IAAD,aACIJ,YAAaA,EACbC,KAAMA,EACNE,UAAWA,EACXE,SAAUH,GACNR,IANZ,IAOQU,O,oBCrDhBE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wCAAwC,SAAW,kC,iCCC9K,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCPlCL,EAAOC,QAAU,CAAC,aAAe,4BAA4B,aAAe,4BAA4B,YAAc,2BAA2B,eAAiB,8BAA8B,UAAY,2B,2HCKtMM,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAUhC,OAAOC,YAAQN,EAARM,EATmB,SAACzB,GAAgC,IAEhDqB,EAAwBrB,EAAxBqB,OAAWnB,EAFoC,YAEvBF,EAFuB,YAItD,OAAKqB,EAGE,cAACG,EAAD,eAAsBtB,IAFlB,cAAC,IAAD,CAAUwB,GAAIC,IAAKC,a,oBCjBtChB,EAAOC,QAAU,CAAC,QAAU,6BAA6B,YAAc,iCAAiC,OAAS,4BAA4B,UAAY,+BAA+B,eAAiB,oCAAoC,gBAAkB,qCAAqC,UAAY,+BAA+B,WAAa,kC,oBCA5VD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,WAAa,kCAAkC,YAAc,mCAAmC,aAAe,oCAAoC,eAAiB,sCAAsC,KAAO,8B,oBCAnOD,EAAOC,QAAU,CAAC,cAAgB,uCAAuC,cAAgB,uCAAuC,UAAY,mCAAmC,UAAY,mCAAmC,iBAAmB,0CAA0C,cAAgB,uCAAuC,gBAAkB,yCAAyC,cAAgB,yC,oBCA7ZD,EAAOC,QAAU,CAAC,kBAAoB,uCAAuC,UAAY,+BAA+B,oBAAsB,yCAAyC,gBAAkB,qCAAqC,cAAgB,mCAAmC,YAAc,iCAAiC,cAAgB,mCAAmC,oBAAsB,yCAAyC,eAAiB,oCAAoC,KAAO,0BAA0B,iBAAmB,wC,oBCA3iBD,EAAOC,QAAU,CAAC,UAAY,6B,oBCA9BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,UAAY,6B,oBCA5GD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uBAAuB,WAAa,yBAAyB,YAAc,0BAA0B,UAAY,wBAAwB,OAAS,qBAAqB,YAAc,0BAA0B,SAAW,uBAAuB,SAAW,uBAAuB,UAAY,wBAAwB,YAAc,4B,sKCD7W,MAA0B,+C,iCCG5BgB,EAAb,4MAEIT,MAAmB,CACfU,UAAU,EACVC,OAAQ,EAAK/B,MAAM+B,OACnBC,QAAS,EAAKhC,MAAMgC,SAL5B,EAQIC,iBAAmB,WACf,EAAKjC,MAAMgC,SACR,EAAKE,SAAS,CACbJ,UAAU,KAXtB,EAeIK,mBAAqB,WACjB,EAAKD,SAAS,CACVJ,UAAU,IAEd,EAAK9B,MAAMoC,iBAAiB,EAAKhB,MAAMW,SAnB/C,EAsBIM,eAAiB,SAACC,GACd,EAAKJ,SAAS,CACVH,OAAQO,EAAEC,cAAcxB,SAxBpC,wDA4BI,SAAmByB,EAA8BC,GACzCD,EAAUT,SAAWW,KAAK1C,MAAM+B,QAChCW,KAAKR,SAAS,CACVH,OAAQW,KAAK1C,MAAM+B,WA/BnC,oBAoCI,WACI,OACI,sBAAKlC,UAAW8C,IAAMC,KAAtB,WAESF,KAAKtB,MAAMU,UACT,sBAAKjC,UAAW8C,IAAME,WAAtB,UACC,0CACA,uBACIhD,UAAW8C,IAAMG,aACjBC,cAAeL,KAAKT,iBAFxB,UAIKS,KAAK1C,MAAM+B,QAAU,SACtB,sBAAMlC,UAAW8C,IAAMK,eAAvB,8BAORN,KAAKtB,MAAMU,UACR,sBAAKjC,UAAW8C,IAAMM,YAAtB,UACC,yCACA,uBACIC,SAAUR,KAAKL,eACfc,WAAS,EACTpC,MAAO2B,KAAKtB,MAAMW,OAClBqB,OAAQV,KAAKP,+BA9DzC,GAAmCkB,IAAMC,W,oCCmE1BC,EAFkBC,YAAiD,CAACC,KAAM,gBAAxDD,EA3DgF,SAAC,GAKO,IAJHE,EAIE,EAJFA,QACAC,EAGE,EAHFA,aACAnE,EAEE,EAFFA,MAIlH,OAAKkE,EAKD,uBAAM7D,UAAW8C,IAAMiB,cAAeC,SAAUF,EAAhD,UACI,sBAAM9D,UAAW8C,IAAMmB,gBAAvB,8BAEA,sBAAKjE,UAAW8C,IAAMoB,UAAtB,UACI,sBAAKlE,UAAW8C,IAAMqB,UAAtB,UACI,8CACC3D,YAAY,YAAa,WAAY,GAAID,IAAO,CAAC6D,KAAM,QAAS,OAErE,sBAAKpE,UAAW8C,IAAMuB,iBAAtB,UACI,sDACC7D,YAAY,GAAI,iBAAkB,GAAID,IAAO,CAAC6D,KAAM,YAAa,OAEtE,sBAAKpE,UAAW8C,IAAMqB,UAAtB,UACI,2DACC3D,YAAY,yBAA0B,4BAA6B,GAAID,IAAO,CAAC6D,KAAM,YAAa,OAEvG,sBAAKpE,UAAW8C,IAAMqB,UAAtB,UACI,6CACC3D,YAAY,WAAY,UAAW,GAAID,IAAO,CAAC6D,KAAM,YAAa,OAGvE,sBAAMpE,UAAW8C,IAAMmB,gBAAvB,0BACA,qBAAKjE,UAAW8C,IAAMwB,cAAtB,SAEQC,OACKC,KAAKX,EAAQY,UACbC,KAAI,SAAAC,GACD,OACI,qBAAK3E,UAAW8C,IAAM8B,cAAtB,SACI,iCAAOD,EAAP,IAAanE,YAAYmE,EAAD,mBAAkBA,GAAO,GAAIpE,IAAO,CAAC6D,KAAM,QAAS,QADtCO,WAQlE,sBAAK3E,UAAW8C,IAAM+B,cAAtB,UACI,0CAEIlF,GACG,8BAAMA,UA5Cd,cAACmF,EAAA,EAAD,O,oCCCAC,EAfwB,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aACnD,OACI,sBAAKjF,UAAW8C,IAAMqB,UAAtB,UACI,8BACI,oBAAGe,KAAMD,GAA8B,GAAvC,cAA6CD,KADjD,OAIIC,EACI,sBAAOjF,UAAW8C,IAAMqC,QAAxB,SAAkCF,IAChC,sBAAOjF,UAAW8C,IAAMqC,QAAxB,+CC4EPC,EAjFK,SAAC,GAA4D,IAA3DvB,EAA0D,EAA1DA,QAAS1B,EAAiD,EAAjDA,QAASkD,EAAwC,EAAxCA,aAEpC,OAAKxB,EAKD,mCACI,gCACI,sBAAM7D,UAAW8C,IAAMmB,gBAAvB,8BACA,sBAAKjE,UAAW8C,IAAMqB,UAAtB,UACI,qBAAKnE,UAAW8C,IAAMwC,iBAAtB,wBAGA,8BACKzB,EAAQ0B,cAGjB,sBAAKvF,UAAW8C,IAAMqB,UAAtB,UACI,qBAAKnE,UAAW8C,IAAMwC,iBAAtB,gCAGA,8BAEQzB,EAAQ2B,eACF,wBACA,mDAIlB,sBAAKxF,UAAW8C,IAAMqB,UAAtB,UACI,qBAAKnE,UAAW8C,IAAMwC,iBAAtB,qCAGA,8BACKzB,EAAQ4B,+BAGjB,sBAAKzF,UAAW8C,IAAMqB,UAAtB,UACI,qBAAKnE,UAAW8C,IAAMwC,iBAAtB,uBAGA,8BACKzB,EAAQ6B,aAGjB,sBAAK1F,UAAW8C,IAAM6C,oBAAtB,UACI,sBAAM3F,UAAW8C,IAAMmB,gBAAvB,0BACA,sBAAKjE,UAAW8C,IAAM8C,eAAtB,yEACI,8CAEJ,qBAAK5F,UAAW8C,IAAMwB,cAAtB,SAEQC,OACKC,KAAKX,EAAQY,UACbC,KAAI,SAAAC,GACG,OACI,sBAAK3E,UAAW8C,IAAM+C,oBAAtB,UACI,sBAAM7F,UAAW8C,IAAMgD,KAAvB,qBACA,cAAC,EAAD,CACId,aAAcL,EACdM,aAAcpB,EAAQY,SAASE,OAJSA,WAcxExC,GACA,qBAAKnC,UAAW8C,IAAMiD,kBAAmBC,QAASX,EAAlD,SACI,0DAtET,cAACP,EAAA,EAAD,KC+BAmB,EAnCqC,SAAC,GAOO,IANHhE,EAME,EANFA,SACA4B,EAKE,EALFA,QACAG,EAIE,EAJFA,SACA7B,EAGE,EAHFA,QACA+D,EAEE,EAFFA,mBACAC,EACE,EADFA,gBAErD,OACI,qCACI,qBAAKnG,UAAW8C,IAAMsD,UAAWJ,QAASG,EAA1C,SACI,qDAGAlE,EAEQ,mCACI,cAAC,EAAD,CACIoE,cAAexC,EACfA,QAASA,EACTG,SAAUA,MAIlB,cAAC,EAAD,CACIH,QAASA,EACT1B,QAASA,EACTkD,aAAca,QCwE3BI,EAhGqC,SAAC,GAOO,IANHzC,EAME,EANFA,QACA3B,EAKE,EALFA,OACAK,EAIE,EAJFA,iBACAgE,EAGE,EAHFA,UACApE,EAEE,EAFFA,QACAqE,EACE,EADFA,YACE,EAEvBC,oBAAkB,GAFK,mBAEhDxE,EAFgD,KAEtCyE,EAFsC,OAGvBD,oBAAkB,GAHK,mBAGhDE,EAHgD,KAGtCC,EAHsC,KAKvD,IAAK/C,EACD,OAAO,cAACiB,EAAA,EAAD,IAGX,IAMMd,EAAQ,uCAAG,WAAO6C,GAAP,SAAAC,EAAA,sEACPN,EAAYK,GADL,OAEbH,GAAY,GAFC,2CAAH,sDAad,OACI,sBAAK1G,UAAW8C,IAAMe,QAAtB,UACI,sBAAK7D,UAAW8C,IAAMiE,YAAtB,UACI,qBAAK/G,UAAW8C,IAAMkE,OAAtB,SACI,qBACIhH,UAAW8C,IAAMmE,UACjBC,IAAI,cACJC,IACItD,GAC6B,OAAzBA,EAAQuD,OAAOC,MACbxD,EAAQuD,OAAOC,MACfC,MAIlB,sBAAKtH,UAAW8C,IAAMyE,eAAtB,UACI,cAAC,EAAD,CACIpF,QAASA,EACTD,OAAQA,EACRK,iBAAkBA,IAEtB,qBAAKvC,UAAW8C,IAAM0E,gBAAtB,SAEQrF,GACG,sBAAKnC,UAAW8C,IAAM2E,WAAtB,UACC,uBACIrD,KAAM,OACNf,SAAU,SAACZ,GAAD,OA9Cd,SAACA,GACrBA,EAAEiF,OAAOC,OAASlF,EAAEiF,OAAOC,MAAMtG,QACjCkF,EAAU9D,EAAEiF,OAAOC,MAAM,IA4CgBC,CAAoBnF,IACrCoF,GAAG,cACHC,OAAO,sBAEX,uBAAOC,QAAQ,2BAMnC,uBAEKpB,EAOO,cAAC,EAAD,CACI1E,SAAUA,EACV4B,QAASA,EACTG,SAAUA,EACV7B,QAASA,EACT+D,mBA3DG,WACvBQ,GAAY,IA2DQP,gBAxDO,WAC3BS,GAAY,MA4CI,qBAAK5G,UAAW8C,IAAMsD,UAAWJ,QAAS,kBAAMY,GAAY,IAA5D,SACI,qDAchB,2B,oDCpCGoB,EA3DF,SAAC7H,GAEV,IAAM8H,EAAWC,cAFa,EAIEzB,oBAAkB,GAJpB,mBAIvBxE,EAJuB,KAIbyE,EAJa,OAKED,oBAAkB,GALpB,mBAKvB0B,EALuB,KAKbC,EALa,KAO1BC,EAAQpG,EAAWa,IAAMwF,OAASxF,IAAMyF,UAc5C,OACI,sBAAKvI,UAAW8C,IAAM0F,KAAtB,UACI,qBAAKxI,UAAW8C,IAAM2F,WAAtB,SACI,qBACItB,IAAI,sIACJD,IAAI,MACJwB,MAAM,UAGd,sBAAK1I,UAAW8C,IAAM6F,SAAtB,UACKxI,EAAMyI,QACP,sBAAK5I,UAAW8C,IAAM+F,YAAtB,UACI,uBAAM7I,UAAW8C,IAAMgG,YAAa9C,QAxBxB,WACxBU,GAAazE,IAuBD,mBACWA,EAAW9B,EAAM4I,WAAa,EAAI5I,EAAM4I,WAC/C,sBAAM/I,UAAWqI,EAAjB,uBAIJ,uBAAMrI,UAAW8C,IAAMgG,YAAa9C,QA1BtB,WAC1BoC,GAAaD,IAyBD,qBAGSA,EAEK,sBAAMnI,UAAW8C,IAAMkG,SAAvB,0BADA,sBAAMhJ,UAAW8C,IAAMkG,SAAvB,mCAMtB,qBACIhD,QAAS,kBAjCM6B,EAiCkB1H,EAAM0H,QAhC/CI,EAASgB,IAAeC,WAAWrB,IADb,IAACA,GAkCf7H,UAAW8C,IAAMqG,YAFrB,wB,oCC5CN/H,EAAYD,YAAiB,IAEtBiI,EAAU5F,IAAM6F,MAAK,YAA+C,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,UAEvCC,EAAOF,EAAYG,MACpB/E,KAAI,SAAA8E,GAAI,OACL,cAAC,EAAD,CAEIZ,QAASY,EAAKZ,QACdG,WAAYS,EAAKT,WACjBlB,GAAI2B,EAAK3B,IAHJ2B,EAAK3B,OAUtB,OACI,sBAAK7H,UAAW8C,IAAM4G,QAAtB,UACI,oBAAI1J,UAAW8C,IAAM6G,YAArB,wBACA,cAACC,EAAD,CAAqB5F,SAPb,SAAC6F,GACbN,EAAUM,EAAOC,eAOb,qBAAK9J,UAAW8C,IAAM2G,MAAtB,SACKD,UA8BXI,EAAsBjG,YAA8B,CAACC,KAAM,yBAArCD,EAxB4C,SAAC,GAA2B,IAA1BG,EAAyB,EAAzBA,aAAciG,EAAW,EAAXA,MAOpF,OACI,uBAAM/F,SANO,SAAC6F,GACV/F,EAAa+F,GACbE,KAIJ,UACI,8BACI,cAACC,EAAA,EAAD,CACIpJ,UAAWV,IACXQ,KAAM,aACND,YAAa,4BACbK,SAAU,CAACG,IAAUG,OAG7B,qBAAKpB,UAAWiK,IAAEC,UAAlB,SACI,sD,QC1CHC,EAAmBvI,aANR,SAACL,GACrB,MAAO,CACH+H,YAAac,YAAuB7I,MAIwE,CAChHgI,UAAWN,IAAeoB,SADEzI,CAE7BwH,GCWYkB,EApB6B,SAAC,GAA0E,IAAzEzG,EAAwE,EAAxEA,QAAS3B,EAA+D,EAA/DA,OAAQK,EAAuD,EAAvDA,iBAAkBJ,EAAqC,EAArCA,QAASoE,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,YAEjG,OACI,0BAASxG,UAAW8C,IAAMe,QAA1B,UACI,cAAC,EAAD,CACIA,QAASA,EACT3B,OAAQA,EACRK,iBAAkBA,EAClBJ,QAASA,EACToE,UAAWA,EACXC,YAAaA,IAGbrE,GACG,cAACgI,EAAD,Q,oCCHbI,G,oKAEF,WACI,IAAIC,EAA2B3H,KAAK1C,MAAMqK,OAS1C,GARKA,IACDA,EAAS3H,KAAK1C,MAAMsK,mBAGhB5H,KAAK1C,MAAMuK,QAAQC,KAAK7I,KAAKC,QAIhCyI,EACD,MAAM,IAAII,MAAM,uBAEhB/H,KAAK1C,MAAM0K,eAAeL,GAC1B3H,KAAK1C,MAAM2K,cAAcN,K,+BAIjC,WACI3H,KAAKkI,mB,gCAGT,SAAmBpI,EAAuCC,EAAyBoI,GAC3EnI,KAAK1C,MAAMqK,SAAW7H,EAAU6H,QAChC3H,KAAKkI,mB,oBAIb,WAEI,OACI,cAAC,EAAD,2BACQlI,KAAK1C,OADb,IAEIgC,SAAUU,KAAK1C,MAAMqK,OACrB3G,QAAShB,KAAK1C,MAAM0D,QACpB3B,OAAQW,KAAK1C,MAAM+B,OACnBK,iBAAkBM,KAAK1C,MAAMoC,iBAC7BgE,UAAW1D,KAAK1C,MAAMoG,UACtBC,YAAa3D,KAAK1C,MAAMqG,mB,GAxCNhD,IAAMC,WAuDlCwH,GAAmBC,aACrBtJ,aAVoB,SAACL,GACrB,MAAO,CACHsC,QAASsH,YAA8B5J,GACvCC,OAAQ4J,aAAsB7J,GAC9BW,OAAQmJ,YAA6B9J,GACrCkJ,iBAAkBa,aAAgC/J,MAK7B,CACrBsJ,mBACAC,kBACAvI,qBACAgE,cACAC,mBC5DmB,SAAqB7E,GAArB,OAAkE,SAACxB,GAE1F,IAAMoL,EAASC,eACTC,EAAWC,eACjB,OAEI,cAAC/J,EAAD,2BACQxB,GADR,IAEIqK,OAAQe,EAAOf,OACfiB,SAAUA,QDsDlB/J,KATqBwJ,CAUvBX,IAEaU","file":"static/js/4.b7da7ad2.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport styles from './FormsControls.module.css'\r\n\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {Validator} from \"redux-form/lib/Field\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\n\r\nconst FormControl: React.FC<FormControlPropsParamsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error\r\n    const styleError = hasError ? styles.error : \"\"\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + styleError}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {\r\n                    hasError\r\n                    && <span>{error}</span>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea className={styles.textarea} {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input  className={styles.input} {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<T extends string>(placeholder: Nullable<string>, name: T, validators: Validator | Validator[], component: componentType, props: { type: string }, text?: string) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n//types====\r\n\r\ntype FormControlPropsParamsType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport type  LoginFormValuesKeysType = Extract<keyof LoginFormValuesType, string>\r\n\r\ntype componentType = \"input\" | \"select\" | \"textarea\" | ComponentType<WrappedFieldProps> | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2wdsi\",\"error\":\"FormsControls_error__2ik_3\",\"formSummaryError\":\"FormsControls_formSummaryError__3OqQc\",\"textarea\":\"FormsControls_textarea__NbXeH\"};","import React from 'react';\r\n\r\nexport const required = (value: string): ReturnValidatorType => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string): ReturnValidatorType => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n//types\r\nexport type ReturnValidatorType = string | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__block\":\"Login_login__block__2ihrM\",\"login__title\":\"Login_login__title__7Ugm-\",\"input__form\":\"Login_input__form__2rUJq\",\"checkbox__form\":\"Login_checkbox__form__3XKIH\",\"form__btn\":\"Login_form__btn__2xfw0\"};","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {PATH} from \"../../utils/RouterPath/RouterPath\";\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(WrappedComponent: React.ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to={PATH.LOGIN}/>\r\n        }\r\n        return <WrappedComponent {...restProps as T} />\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n//types============\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__2Yo9y\",\"avatarBlock\":\"ProfileInfo_avatarBlock__2ASvU\",\"avatar\":\"ProfileInfo_avatar__22Iyr\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1HIt9\",\"profile__inner\":\"ProfileInfo_profile__inner__2gQFC\",\"addedPhoto__btn\":\"ProfileInfo_addedPhoto__btn__2LFy0\",\"view__btn\":\"ProfileInfo_view__btn__15MPv\",\"avatarEdit\":\"ProfileInfo_avatarEdit__18rPK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3Z-pR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusText\":\"ProfileStatus_statusText__17cZK\",\"activeInput\":\"ProfileStatus_activeInput__y93fa\",\"status__text\":\"ProfileStatus_status__text__1QW_f\",\"status__pencil\":\"ProfileStatus_status__pencil__23GNR\",\"main\":\"ProfileStatus_main__ht-pm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"saveEdit__btn\":\"ProfileDataForm_saveEdit__btn__dBpLd\",\"formContainer\":\"ProfileDataForm_formContainer__1dZzi\",\"form_edit\":\"ProfileDataForm_form_edit__fKSjr\",\"formBlock\":\"ProfileDataForm_formBlock__2TEvJ\",\"formBlock__check\":\"ProfileDataForm_formBlock__check__1xywX\",\"contactsBlock\":\"ProfileDataForm_contactsBlock__24S0A\",\"contacts__Title\":\"ProfileDataForm_contacts__Title__Lef2r\",\"contact__item\":\"ProfileDataForm_contact__item__2obQ2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activateEdit__btn\":\"ProfileData_activateEdit__btn__2kEEp\",\"formBlock\":\"ProfileData_formBlock__3CfgK\",\"contacts__container\":\"ProfileData_contacts__container__3T5li\",\"contacts__Title\":\"ProfileData_contacts__Title__3gmX9\",\"contact__item\":\"ProfileData_contact__item__GdbPj\",\"contactsRow\":\"ProfileData_contactsRow__3xBuW\",\"contactsBlock\":\"ProfileData_contactsBlock__2YCc8\",\"contactsBlock__item\":\"ProfileData_contactsBlock__item__1ZGzu\",\"contacts__text\":\"ProfileData_contacts__text__RJrWs\",\"icon\":\"ProfileData_icon__1sdxe\",\"formBlock__title\":\"ProfileData_formBlock__title__2eEKn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formBlock\":\"Contact_formBlock__3G5hX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__FQQlZ\",\"post__title\":\"MyPosts_post__title__3Ccz0\",\"form__btn\":\"MyPosts_form__btn__2ny5Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1LZi-\",\"itemText\":\"Post_itemText__3jxIt\",\"postAvatar\":\"Post_postAvatar__3nqPd\",\"likeCounter\":\"Post_likeCounter__2nedA\",\"notActive\":\"Post_notActive__1kUZL\",\"active\":\"Post_active__28QVg\",\"activeBlock\":\"Post_activeBlock__xoMef\",\"fingerUp\":\"Post_fingerUp__pYmx6\",\"reaction\":\"Post_reaction__3c_p3\",\"form__btn\":\"Post_form__btn__1mdJC\",\"delete__btn\":\"Post_delete__btn__2HU7q\"};","export default __webpack_public_path__ + \"static/media/avatar_for_profile.e4c1e159.jpg\";","import React, {ChangeEvent} from 'react';\r\nimport style from './ProfileStatus.module.css'\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\r\n\r\n    state: stateType = {\r\n        editMode: false,\r\n        status: this.props.status,\r\n        isOwner: this.props.isOwner,\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.props.isOwner\r\n        && this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileStatusType, prevState: boolean) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status,\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={style.main}>\r\n                {\r\n                    !this.state.editMode\r\n                    && <div className={style.statusText}>\r\n                        <h3>Status: </h3>\r\n                        <span\r\n                            className={style.status__text}\r\n                            onDoubleClick={this.activateEditMode}\r\n                        >\r\n                            {this.props.status || \"------\"}\r\n                            <span className={style.status__pencil}>\r\n                                &nbsp;✎\r\n                            </span>\r\n                        </span>\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.editMode\r\n                    && <div className={style.activeInput}>\r\n                        <h3>Status:</h3>\r\n                        <input\r\n                            onChange={this.onStatusChange}\r\n                            autoFocus\r\n                            value={this.state.status}\r\n                            onBlur={this.deactivateEditMode}\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//types====\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\ntype stateType = {\r\n    editMode: boolean\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n","import React, {FC} from \"react\";\r\nimport style from './ProfileDataForm.module.css'\r\n\r\nimport {ProfileType} from \"../../../../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../../../../../common/Preloader/Preloader\";\r\nimport {createField, Input, Textarea} from \"../../../../../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({\r\n                                                                                                                      profile,\r\n                                                                                                                      handleSubmit,\r\n                                                                                                                      error,\r\n\r\n                                                                                                                  }) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <form className={style.formContainer} onSubmit={handleSubmit}>\r\n            <span className={style.contacts__Title}>Little about me:</span>\r\n\r\n            <div className={style.form_edit}>\r\n                <div className={style.formBlock}>\r\n                    <span>Full name:</span>\r\n                    {createField(\"Full name\", \"fullname\", [], Input, {type: \"text\"}, \"\")}\r\n                </div>\r\n                <div className={style.formBlock__check}>\r\n                    <span>Looking for a job:</span>\r\n                    {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"}, \"\")}\r\n                </div>\r\n                <div className={style.formBlock}>\r\n                    <span>My professional skills:</span>\r\n                    {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Input, {type: \"textarea\"}, \"\")}\r\n                </div>\r\n                <div className={style.formBlock}>\r\n                    <span>About me:</span>\r\n                    {createField(\"About me\", \"aboutMe\", [], Input, {type: \"textarea\"}, \"\")}\r\n                </div>\r\n\r\n                <span className={style.contacts__Title}>My contacts:</span>\r\n                <div className={style.contactsBlock}>\r\n                    {\r\n                        Object\r\n                            .keys(profile.contacts)\r\n                            .map(key => {\r\n                                return (\r\n                                    <div className={style.contact__item} key={key}>\r\n                                        <span>{key}:{createField(key, `contacts.${key}`, [], Input, {type: \"text\"}, \"\")}</span>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={style.saveEdit__btn}>\r\n                <button>Save</button>\r\n                {\r\n                    error\r\n                    && <div>{error}</div>\r\n                }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n\r\n//types======\r\nexport type ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    goToEditMode?: () => void\r\n}","import React, {FC} from \"react\";\r\nimport style from \"./Contact.module.css\";\r\n\r\nconst Contact: FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={style.formBlock}>\r\n            <b>\r\n                <a href={contactValue ? contactValue : ''}> {contactTitle}</a>:\r\n            </b>\r\n            {\r\n                contactValue ?\r\n                    <span  className={style.address}>{contactValue}</span>\r\n                    : <span  className={style.address}>\"Information is not provided\"</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n\r\n//types\r\nexport type ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}","import {Preloader} from \"../../../../../../common/Preloader/Preloader\";\r\nimport style from \"./ProfileData.module.css\";\r\n\r\nimport {ContactsType, ProfileType} from \"../../../../../../redux/profileReducer\";\r\nimport React from \"react\";\r\nimport Contact from \"./Contact/Contact\";\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataPropsType) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <span className={style.contacts__Title}>Little about me:</span>\r\n                <div className={style.formBlock}>\r\n                    <div className={style.formBlock__title}>\r\n                        Full name:\r\n                    </div>\r\n                    <div>\r\n                        {profile.fullName}\r\n                    </div>\r\n                </div>\r\n                <div className={style.formBlock}>\r\n                    <div className={style.formBlock__title}>\r\n                        Looking for a job:\r\n                    </div>\r\n                    <div>\r\n                        {\r\n                            profile.lookingForAJob\r\n                                ? \"I'm looking for a job\"\r\n                                : 'no, I\\'m not looking for a job at the moment'\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className={style.formBlock}>\r\n                    <div className={style.formBlock__title}>\r\n                        My professional skills:\r\n                    </div>\r\n                    <div>\r\n                        {profile.lookingForAJobDescription}\r\n                    </div>\r\n                </div>\r\n                <div className={style.formBlock}>\r\n                    <div className={style.formBlock__title}>\r\n                        About me:\r\n                    </div>\r\n                    <div>\r\n                        {profile.aboutMe}\r\n                    </div>\r\n                </div>\r\n                <div className={style.contacts__container}>\r\n                    <span className={style.contacts__Title}>My contacts:</span>\r\n                    <div className={style.contacts__text}>If you want to go to my web pages - click on the title below\r\n                        <span> &#9759;</span>\r\n                    </div>\r\n                    <div className={style.contactsBlock}>\r\n                        {\r\n                            Object\r\n                                .keys(profile.contacts)\r\n                                .map(key => {\r\n                                        return (\r\n                                            <div className={style.contactsBlock__item} key={key}>\r\n                                                <span className={style.icon}>&#10003; </span>\r\n                                                <Contact\r\n                                                    contactTitle={key}\r\n                                                    contactValue={profile.contacts[key as keyof ContactsType]}\r\n                                                />\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                )\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {\r\n                    isOwner &&\r\n                    <div className={style.activateEdit__btn} onClick={goToEditMode}>\r\n                        <button>Edit contacts</button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileData\r\n\r\n//types====\r\nexport type ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode?: () => void\r\n}","import React from 'react';\r\nimport style from \"../ProfileInfo.module.css\";\r\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\nimport {ProfileType} from \"../../../../../redux/profileReducer\";\r\n\r\nconst ProfileEdit: React.FC<ProfileEditPropsType> = ({\r\n                                                         editMode,\r\n                                                         profile,\r\n                                                         onSubmit,\r\n                                                         isOwner,\r\n                                                         setEditModeHandler,\r\n                                                         disableViewMode\r\n                                                     }) => {\r\n    return (\r\n        <>\r\n            <div className={style.view__btn} onClick={disableViewMode}>\r\n                <button>Hide contacts</button>\r\n            </div>\r\n            {\r\n                editMode\r\n                    ? (\r\n                        <>\r\n                            <ProfileDataForm\r\n                                initialValues={profile}\r\n                                profile={profile}\r\n                                onSubmit={onSubmit}\r\n                            />\r\n                        </>\r\n                    ) : (\r\n                        <ProfileData\r\n                            profile={profile}\r\n                            isOwner={isOwner}\r\n                            goToEditMode={setEditModeHandler}\r\n                        />\r\n                    )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileEdit\r\n\r\n//types\r\ntype ProfileEditPropsType = {\r\n    editMode: boolean\r\n    profile: ProfileType\r\n    onSubmit: any\r\n    isOwner: boolean\r\n    setEditModeHandler: () => void\r\n    disableViewMode: () => void\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport style from \"./ProfileInfo.module.css\"\r\n\r\nimport avatarDefault from '../../../../assets/images/avatar_for_profile.jpg'\r\nimport {ProfileType} from \"../../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../../../common/Preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\r\nimport ProfileEdit from \"./ProfileEdit/ProfileEdit\";\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n                                                         profile,\r\n                                                         status,\r\n                                                         updateUserStatus,\r\n                                                         savePhoto,\r\n                                                         isOwner,\r\n                                                         saveProfile\r\n                                                     }) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [viewMode, setViewMode] = useState<boolean>(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (formData: ProfileType): Promise<any> => {\r\n        await saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const setEditModeHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const disableViewModeHandler = () => {\r\n        setViewMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            <div className={style.avatarBlock}>\r\n                <div className={style.avatar}>\r\n                    <img\r\n                        className={style.mainPhoto}\r\n                        alt='main avatar'\r\n                        src={\r\n                            profile\r\n                            && (profile.photos.large !== null)\r\n                                ? profile.photos.large\r\n                                : avatarDefault\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className={style.profile__inner}>\r\n                    <ProfileStatus\r\n                        isOwner={isOwner}\r\n                        status={status}\r\n                        updateUserStatus={updateUserStatus}\r\n                    />\r\n                    <div className={style.addedPhoto__btn}>\r\n                        {\r\n                            isOwner\r\n                            && <div className={style.avatarEdit}>\r\n                                <input\r\n                                    type={\"file\"}\r\n                                    onChange={(e) => onMainPhotoSelected(e)}\r\n                                    id=\"imageUpload\"\r\n                                    accept=\".png, .jpg, .jpeg\"\r\n                                />\r\n                                <label htmlFor=\"imageUpload\"></label>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr/>\r\n            {\r\n                !viewMode\r\n                    ? (\r\n                        <div className={style.view__btn} onClick={() => setViewMode(true)}>\r\n                            <button>View contacts</button>\r\n                        </div>\r\n\r\n                    ) : (\r\n                        <ProfileEdit\r\n                            editMode={editMode}\r\n                            profile={profile}\r\n                            onSubmit={onSubmit}\r\n                            isOwner={isOwner}\r\n                            setEditModeHandler={setEditModeHandler}\r\n                            disableViewMode={disableViewModeHandler}\r\n                        />\r\n                    )\r\n            }\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo\r\n\r\n//types\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}","import React, {useState} from 'react';\r\nimport style from \"./Post.module.css\"\r\nimport {PostType, ProfileActions} from \"../../../../../redux/profileReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst Post = (props: PostType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [fingerUp, setFingerUp] = useState<boolean>(false)\r\n\r\n    let heart = editMode ? style.active : style.notActive\r\n\r\n    const statusChangeHandler = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n\r\n    const fingerUpChangeHandler = () => {\r\n        setFingerUp(!fingerUp)\r\n    }\r\n\r\n    const deletePostHandler = (id: number) => {\r\n        dispatch(ProfileActions.deletePost(id))\r\n    }\r\n\r\n    return (\r\n        <div className={style.item}>\r\n            <div className={style.postAvatar}>\r\n                <img\r\n                    src=\"https://slovami.net/wp-content/uploads/thumbs_dir/the-most-beautiful-guys-russia-4-1-nwkkkydf2f1mhw9a4ijzfs2ktasvevyjiyi4xibqis.jpg\"\r\n                    alt=\"ava\"\r\n                    title=\"ava\"\r\n                />\r\n            </div>\r\n            <div className={style.itemText}>\r\n                {props.message}\r\n                <div className={style.activeBlock}>\r\n                    <span className={style.likeCounter} onClick={statusChangeHandler}>\r\n                        like: {editMode ? props.likesCount + 1 : props.likesCount}\r\n                        <span className={heart}>\r\n                            &#9829;\r\n                        </span>\r\n                    </span>\r\n                    <span className={style.likeCounter} onClick={fingerUpChangeHandler}>\r\n                        respect:\r\n                        {\r\n                            !fingerUp\r\n                                ? <span className={style.reaction}>&#128077;</span>\r\n                                : <span className={style.reaction}>&#128526;</span>\r\n                        }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div\r\n                onClick={() => deletePostHandler(props.id)}\r\n                className={style.delete__btn}\r\n            >\r\n                ❌\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, {SyntheticEvent} from 'react';\r\nimport style from \"./MyPosts.module.css\"\r\n\r\nimport Post from \"./Post/Post\";\r\nimport {UsersPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\nimport s from \"../../../Login/Login.module.scss\";\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nexport const MyPosts = React.memo(({profilePage, onAddPost}: UsersPropsType) => {\r\n\r\n    const post = profilePage.posts\r\n        .map(post =>\r\n            <Post\r\n                key={post.id}\r\n                message={post.message}\r\n                likesCount={post.likesCount}\r\n                id={post.id}\r\n            />)\r\n\r\n    const addPost = (values: AddNewPostFormType) => {\r\n        onAddPost(values.AddNewPost)\r\n    }\r\n\r\n    return (\r\n        <div className={style.myPosts}>\r\n            <h3 className={style.post__title}>My posts :</h3>\r\n            <ReduxAddNewPostForm onSubmit={addPost}/>\r\n            <div className={style.posts}>\r\n                {post}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = ({handleSubmit, reset}) => {\r\n\r\n    const onSubmit = (values: SyntheticEvent<any, Event>) => {\r\n            handleSubmit(values)\r\n            reset()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={\"AddNewPost\"}\r\n                    placeholder={\"Write your message ✉\"}\r\n                    validate={[required, maxLength]}\r\n                />\r\n            </div>\r\n            <div className={s.form__btn}>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxAddNewPostForm = reduxForm<AddNewPostFormType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\n//types\r\n\r\ntype AddNewPostFormType = {\r\n    AddNewPost: string\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {initialStateProfileType, ProfileActions} from \"../../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../../redux/reduxStore\";\r\nimport {getProfilePageSelector} from \"../../../../selectors/profileSelectors\";\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: getProfilePageSelector(state)\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect<MapStateToPropsType, MapDispatchToProps, {}, AppStateType>(mapStateToProps, {\r\n    onAddPost: ProfileActions.addPost\r\n})(MyPosts)\r\n\r\n//types=============\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: initialStateProfileType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    onAddPost: (newPostText: string) => void\r\n}","import React from 'react';\r\nimport style from \"./Profile.module.css\"\r\n\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\n\r\nconst Profile: React.FC<ProfilePropsType> = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    return (\r\n        <section className={style.profile}>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                updateUserStatus={updateUserStatus}\r\n                isOwner={isOwner}\r\n                savePhoto={savePhoto}\r\n                saveProfile={saveProfile}\r\n            />\r\n            {\r\n                isOwner\r\n                && <MyPostsContainer/>\r\n            }\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n\r\n//Types\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}","import React, {ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\n\r\nimport {\r\n    getUserStatus,\r\n    getUserProfile,\r\n    ProfileType,\r\n    updateUserStatus, savePhoto, saveProfile\r\n} from \"../../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {InjectedProps, withRouter2} from \"../../../hoc/withRouter/withRouter\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect/withAuthRedirect\";\r\nimport {Nullable} from \"../../../types/Nullable\";\r\nimport {getProfilePageProfileSelector, getProfilePageStatusSelector} from \"../../../selectors/profileSelectors\";\r\nimport {getAuthAuthorizedUserIDSelector, getAuthIsAuthSelector} from \"../../../selectors/authSelectors\";\r\n\r\nclass ProfileAPIContainer extends React.Component<ProfilePropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: Nullable<string> = this.props.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserID;\r\n            if (!userId) {\r\n                //@ts-ignore\r\n                this.props.history.push(PATH.LOGIN)\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            throw new Error(\"ID should be exists\")\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getUserStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.userId !== prevProps.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateUserStatus={this.props.updateUserStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: getProfilePageProfileSelector(state),\r\n        isAuth: getAuthIsAuthSelector(state),\r\n        status: getProfilePageStatusSelector(state),\r\n        authorizedUserID: getAuthAuthorizedUserIDSelector(state),\r\n    }\r\n}\r\n\r\nconst ProfileContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        savePhoto,\r\n        saveProfile,\r\n    }),\r\n    withRouter2,\r\n    withAuthRedirect\r\n)(ProfileAPIContainer)\r\n\r\nexport default ProfileContainer\r\n\r\n//types===\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    isAuth: boolean\r\n    status: string\r\n    authorizedUserID: Nullable<string>\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userId: Nullable<string>) => void\r\n    getUserStatus: (userId: Nullable<string>) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToProps & InjectedProps\r\n\r\n","import React from \"react\";\r\nimport {useLocation, useParams} from \"react-router-dom\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\n\r\nexport const withRouter = (WrappedComponent: typeof React.Component) => (props: WrappedComponentWithRouterPropsType) => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const location = useLocation()\r\n\r\n    return (\r\n\r\n        <WrappedComponent\r\n            {...props}\r\n            userId={params.userId}\r\n            location={location}\r\n        />\r\n    )\r\n}\r\n\r\nexport const withRouter2 = <T  extends object> (WrappedComponent: React.ComponentType<T>) => (props: T) => {\r\n\r\n    const params = useParams<'userId'>();\r\n    const location = useLocation()\r\n    return (\r\n\r\n        <WrappedComponent\r\n            {...props as T}\r\n            userId={params.userId}\r\n            location={location}\r\n        />\r\n    )\r\n}\r\n\r\n//types===========\r\nexport type locationType = {\r\n    hash: string\r\n    key: string\r\n    pathname: string\r\n    search: string\r\n    state: Nullable<object>\r\n}\r\n\r\nexport type WrappedComponentWithRouterPropsType = {\r\n    userId: string\r\n    location: locationType\r\n}\r\n\r\nexport type InjectedProps = {\r\n    userId : string\r\n}\r\n\r\n"],"sourceRoot":""}