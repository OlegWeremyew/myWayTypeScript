{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.tsx","components/Login/Login.module.css","components/Login/Login.tsx"],"names":["FormControl","meta","touched","error","children","hasError","styleError","styles","className","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","module","exports","required","value","maxLengthCreator","maxLength","length","Login","dispatch","useDispatch","captchaUrl","useSelector","state","auth","isAuth","to","PATH","PROFILE","s","login__block","login__title","LoginReduxForm","onSubmit","formData","login","email","password","rememberMe","captcha","reduxForm","form","handleSubmit","input__form","type","checkbox__form","src","alt","style","formSummaryError","form__btn"],"mappings":"qRAOMA,EAAoD,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAE1EC,EAAWH,GAAWC,EACtBG,EAAaD,EAAWE,IAAOJ,MAAQ,GAE7C,OACI,sBAAKK,UAAWD,IAAOE,YAAc,IAAMH,EAA3C,UACI,8BACKF,IAEL,8BACKC,GAAY,+BAAOF,UAMvBO,EAAwC,SAACC,GAAW,IACtDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD8C,YACxBU,EADwB,mBAE5D,OACI,cAACX,EAAD,2BAAiBW,GAAjB,aACI,oDAAcC,GAAWC,QAKxBC,EAAqC,SAACH,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD2C,YACrBU,EADqB,mBAEzD,OACI,cAACX,EAAD,2BAAiBW,GAAjB,aACI,iDAAWC,GAAWC,QAK3B,SAASE,EAA8BC,EAA+BC,EAASC,EAAqCC,EAA0BR,EAAyBS,GAC1K,OACI,gCACI,cAAC,IAAD,aACIJ,YAAaA,EACbC,KAAMA,EACNE,UAAWA,EACXE,SAAUH,GACNP,IANZ,IAOQS,O,oBClDhBE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCC3H,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCPlCL,EAAOC,QAAU,CAAC,aAAe,4BAA4B,aAAe,4BAA4B,YAAc,2BAA2B,eAAiB,8BAA8B,UAAY,2B,iCCD5M,qHAyCeM,UA1BS,WAEpB,IAAMC,EAAWC,cAEXC,EAAaC,aAA4C,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,cAQnF,OAPeC,aAAmC,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,UAQ3D,cAAC,IAAD,CAAUC,GAAIC,IAAKC,UAI1B,sBAAK/B,UAAWgC,IAAEC,aAAlB,UACI,oBAAIjC,UAAWgC,IAAEE,aAAjB,mBACA,cAACC,EAAD,CACIC,SAbK,SAACC,GACdf,EAASgB,YAAMD,EAASE,MAAOF,EAASG,SAAUH,EAASI,WAAYJ,EAASK,WAaxElB,WAAYA,QAO5B,IA6BMW,EAAiBQ,YAA2C,CAACC,KAAM,SAAlDD,EA7B6E,SAAC,GAIO,IAHHE,EAGE,EAHFA,aACAlD,EAEE,EAFFA,MACA6B,EACE,EADFA,WAErG,OACI,uBAAMY,SAAUS,EAAhB,UACI,qBAAK7C,UAAWgC,IAAEc,YAAlB,SACKvC,YAAqC,QAAS,QAAS,CAACS,KAAWV,IAAO,CAACyC,KAAM,WAEtF,qBAAK/C,UAAWgC,IAAEc,YAAlB,SACKvC,YAAqC,WAAY,WAAY,CAACS,KAAWV,IAAO,CAACyC,KAAM,eAE5F,qBAAK/C,UAAWgC,IAAEgB,eAAlB,SACKzC,YAAqC,KAAM,aAAc,GAAID,IAAO,CAACyC,KAAM,YAAa,iBAG5FvB,GAAc,qBAAKyB,IAAKzB,EAAY0B,IAAI,eACxCvD,GAAS,qBAAKK,UAAWmD,IAAMC,iBAAtB,SAAyCzD,IAElD6B,GAAcjB,YAAqC,qBAAsB,UAAW,CAACS,KAAWV,IAAO,CAACyC,KAAM,SAC9GvB,GAAc,wBAAQuB,KAAM,SAAd,yBACf,qBAAK/C,UAAWgC,IAAEqB,UAAlB,SACI","file":"static/js/9.a6a29032.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport styles from './FormsControls.module.css'\r\n\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {Validator} from \"redux-form/lib/Field\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\n\r\nconst FormControl: React.FC<FormControlPropsParamsType> = ({meta: {touched, error}, children}) => {\r\n\r\n    const hasError = touched && error\r\n    const styleError = hasError ? styles.error : \"\"\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + styleError}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport function createField<T extends string>(placeholder: Nullable<string>, name: T, validators: Validator | Validator[], component: componentType, props: { type: string }, text?: string) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                component={component}\r\n                validate={validators}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n//types====\r\n\r\ntype FormControlPropsParamsType = {\r\n    meta: WrappedFieldMetaProps\r\n    children: React.ReactNode\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport type  LoginFormValuesKeysType = Extract<keyof LoginFormValuesType, string>\r\n\r\ntype componentType = \"input\" | \"select\" | \"textarea\" | ComponentType<WrappedFieldProps> | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2wdsi\",\"error\":\"FormsControls_error__2ik_3\",\"formSummaryError\":\"FormsControls_formSummaryError__3OqQc\"};","import React from 'react';\r\n\r\nexport const required = (value: string): ReturnValidatorType => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string): ReturnValidatorType => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n//types\r\nexport type ReturnValidatorType = string | undefined","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login__block\":\"Login_login__block__3Z2Z2\",\"login__title\":\"Login_login__title__r9PbQ\",\"input__form\":\"Login_input__form__3jRkt\",\"checkbox__form\":\"Login_checkbox__form__2CVW5\",\"form__btn\":\"Login_form__btn__22JJo\"};","import React from 'react';\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\"\r\nimport s from \"./Login.module.css\"\r\n\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input, LoginFormValuesKeysType} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {PATH} from \"../../common/RouterPath/RouterPath\";\r\n\r\n\r\nconst Login: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const captchaUrl = useSelector<AppStateType, Nullable<string>>(state => state.auth.captchaUrl)\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.isAuth)\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.login__block}>\r\n            <h1 className={s.login__title}>Login</h1>\r\n            <LoginReduxForm\r\n                onSubmit={onSubmit}\r\n                captchaUrl={captchaUrl}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default Login\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnProps> & LoginFormOwnProps> = ({\r\n                                                                                                         handleSubmit,\r\n                                                                                                         error,\r\n                                                                                                         captchaUrl\r\n                                                                                                     }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={s.input__form}>\r\n                {createField<LoginFormValuesKeysType>(\"Email\", \"email\", [required], Input, {type: \"text\"})}\r\n            </div>\r\n            <div className={s.input__form}>\r\n                {createField<LoginFormValuesKeysType>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            </div>\r\n            <div className={s.checkbox__form}>\r\n                {createField<LoginFormValuesKeysType>(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"Remember me\")}\r\n            </div>\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt='captchaUrl'/>}\r\n            {error && <div className={style.formSummaryError}>{error}</div>}\r\n\r\n            {captchaUrl && createField<LoginFormValuesKeysType>('Symbols from image', 'captcha', [required], Input, {type: \"text\"})}\r\n            {captchaUrl && <button type={'submit'}>Get Started</button>}\r\n            <div className={s.form__btn}>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormOwnProps>({form: \"Login\"})(LoginForm)\r\n\r\n\r\n//Types==============================================\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n    checkbox: boolean\r\n}\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: Nullable<string>\r\n}"],"sourceRoot":""}